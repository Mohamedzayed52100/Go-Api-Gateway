openapi: 3.1.0
info:
  title: GoPlace
  version: 0.0.1
servers:
  - url: "https://api-dev.goplace.io"
    description: Development server
  - url: "https://api-staging.goplace.io"
    description: Staging server
  - url: "https://api.goplace.io"
    description: Production server
tags:
  - name: user
    description: User operations
  - name: guest
    description: Guest operations
  - name: settings
    description: Settings operations
  - name: customer-service
    description: Customer service operations
  - name: reports
    description: Reports operations
paths:
  /auth/login:
    post:
      summary: Login
      description: Login with a user
      operationId: login
      requestBody:
        description: User credentials
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
      responses:
        "200":
          description: Login successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginResponse"
        default:
          $ref: "#/components/responses/GeneralError"
      tags:
        - user

  /auth/logout:
    post:
      summary: Logout
      description: Logout
      operationId: logout
      responses:
        "200":
          description: Logout successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LogoutResponse"
        default:
          $ref: "#/components/responses/GeneralError"
      tags:
        - user

  /demo/request:
    post:
      summary: Request a demo
      description: Request a demo
      operationId: requestDemo
      requestBody:
        description: Demo details
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DemoRequest"
      responses:
        "200":
          description: Demo created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DemoResponse"
        default:
          $ref: "#/components/responses/GeneralError"
      tags:
        - user

  /user/me/pin:
    post:
      summary: Check pin code
      description: Check user 8 digit pin code
      operationId: checkPinCode
      parameters:
        - name: role
          in: query
          description: Role
          required: false
          schema:
            type: string
      requestBody:
        description: Pin code and token
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PinCodeRequest"
      responses:
        "200":
          description: Pin code checked successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PinCodeResponse"
        default:
          $ref: "#/components/responses/GeneralError"
    put:
      summary: Update pin code
      description: Update user 8 digit pin code
      operationId: updatePinCode
      requestBody:
        description: Old code and new code with confirmation
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdatePinCodeRequest"
      responses:
        "200":
          description: Pin code updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdatePinCodeResponse"
        default:
          $ref: "#/components/responses/GeneralError"

  /user/me:
    get:
      summary: Get authenticated user
      description: Get authenticated user
      operationId: getAuthenticatedUser
      responses:
        "200":
          description: Authenticated user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetAuthenticatedUserResponse"
        default:
          $ref: "#/components/responses/GeneralError"
      tags:
        - user

  /guests:
    get:
      summary: Get all guests
      description: Get all guests
      operationId: getAllGuests
      parameters:
        - name: perPage
          in: query
          description: Guests per page
          required: true
          schema:
            type: integer
            format: int32
        - name: currentPage
          in: query
          description: Current page
          required: true
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          description: Guests sort criteria
          required: false
          schema:
            type: string
        - name: query
          in: query
          description: Search query
          required: true
          schema:
            type: string
      responses:
        "200":
          description: List of guests
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetAllGuestsResponse"
        default:
          $ref: "#/components/responses/GeneralError"
    post:
      summary: Create a new guest
      description: Create a new guest
      operationId: createGuest
      requestBody:
        description: Guest data
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateGuestRequest"
      responses:
        "201":
          description: Guest created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateGuestResponse"
        default:
          $ref: "#/components/responses/GeneralError"

  /guests/import/sheet:
    post:
      summary: Import guests from excel sheet
      description: Import guests from excel sheet
      operationId: importGuestsFromExcel
      requestBody:
        description: Guest data
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ImportGuestsFromExcelRequest"
      responses:
        "201":
          description: Guests imported
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImportGuestsFromExcelResponse"
        default:
          $ref: "#/components/responses/GeneralError"

  /guests/{guestId}:
    get:
      summary: Get guest by id
      description: Get guest by id
      operationId: getGuestByID
      parameters:
        - name: guestId
          in: path
          description: Auto incremental guest id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: List of guests
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetGuestByIDResponse"
        default:
          $ref: "#/components/responses/GeneralError"
    put:
      summary: Update guest data
      description: Update guest data
      operationId: updateGuest
      x-permissions: ["update.guests"]
      parameters:
        - name: guestId
          in: path
          description: Auto incremental guest id
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: Guest Id and new data
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateGuestRequest"
      responses:
        "201":
          description: Guest updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateGuestResponse"
        default:
          $ref: "#/components/responses/GeneralError"

  /guests/{guestId}/notes:
    post:
      summary: Add notes to guest
      description: Add note to guest
      operationId: addGuestNote
      x-permissions: ["add-note.guests"]
      parameters:
        - name: guestId
          in: path
          description: Auto incremental guest id
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: Guest Id and new data
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GuestNoteParams"
      responses:
        "201":
          description: Note added
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateGuestResponse"
        default:
          $ref: "#/components/responses/GeneralError"

  /guests/{guestId}/notes/{noteId}:
    put:
      summary: Update note
      description: Update note
      operationId: updateGuestNote
      parameters:
        - name: guestId
          in: path
          description: Auto incremental guest id
          required: true
          schema:
            type: integer
            format: int32
        - name: noteId
          in: path
          description: Note id
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: Guest Id and new data
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GuestNoteParams"
      responses:
        "201":
          description: Note added
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GuestNote"
        default:
          $ref: "#/components/responses/GeneralError"
    delete:
      summary: Delete guest note by id
      description: Delete guest note by id
      operationId: deleteGuestNote
      parameters:
        - name: guestId
          in: path
          description: Auto incremental guest id
          required: true
          schema:
            type: integer
            format: int32
        - name: noteId
          in: path
          description: Note id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Guest note deleted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteGuestNoteResponse"
        default:
          $ref: "#/components/responses/GeneralError"

  /guests/{guestId}/feedbacks:
    get:
      summary: Get guest feedbacks
      description: Get guest feedbacks
      operationId: getAllGuestFeedback
      parameters:
        - name: guestId
          in: path
          description: Auto incremental guest id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: List of feedbacks
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetAllGuestFeedbacksResponse"
        default:
          $ref: "#/components/responses/GeneralError"

  /guests/{guestId}/reservations:
    get:
      summary: Get guest reservations
      description: Get guest reservations
      operationId: getAllGuestReservations
      parameters:
        - name: guestId
          in: path
          description: Auto incremental guest id
          required: true
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          description: Guests sort criteria
          required: false
          schema:
            type: string
      responses:
        "200":
          description: List of reservations
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetAllReservationsResponse"
        default:
          $ref: "#/components/responses/GeneralError"

  /guests/{guestId}/reservations/upcoming:
    get:
      summary: Get upcoming reservations for guest
      description: Get upcoming reservations for guest
      operationId: getGuestUpcomingReservations
      parameters:
        - name: guestId
          in: path
          description: guest id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Nearest upcoming reservations
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetGuestUpcomingReservationResponse"

  /guests/{guestId}/logs:
    get:
      summary: Get all logs for specific guest
      description: Get all logs for specific guest
      operationId: getAllGuestLogs
      parameters:
        - name: guestId
          in: path
          description: Guest id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: List of all logs for specific guest
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetAllGuestLogsResponse"
        default:
          $ref: "#/components/responses/GeneralError"

  /reservations:
    get:
      summary: Get all reservations
      description: Get all reservations
      operationId: getAllReservations
      parameters:
        - name: perPage
          in: query
          description: Reservations per page
          required: true
          schema:
            type: integer
            format: int32
        - name: currentPage
          in: query
          description: Current page
          required: true
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          description: Reservation sort criteria
          required: false
          schema:
            type: string
        - name: query
          in: query
          description: Search query
          required: true
          schema:
            type: string
        - name: statusIds
          in: query
          description: Status ids
          required: false
          schema:
            type: string
        - name: shiftId
          in: query
          description: Shift id
          required: false
          schema:
            type: integer
            format: int32
        - name: branchId
          in: query
          description: Branch id
          required: false
          schema:
            type: integer
            format: int32
        - name: tableIds
          in: query
          description: Table ids
          required: false
          schema:
            type: integer
            format: int32
        - name: date
          in: query
          description: Date
          required: false
          schema:
            type: string
      responses:
        "200":
          description: List of reservations
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetAllReservationsResponse"
        "412":
          description: Precondition Failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    format: int32
                    type: integer
                  message:
                    type: string
        default:
          $ref: "#/components/responses/GeneralError"
    post:
      summary: Create a new reservation
      description: Create a new reservation
      operationId: createReservation
      x-permissions: ["create.reservations"]
      requestBody:
        description: Reservation data
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateReservationRequest"
      responses:
        "201":
          description: Reservation created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateReservationResponse"
        default:
          $ref: "#/components/responses/GeneralError"

  /reservations/{reservationId}:
    get:
      summary: Get reservation by id
      description: Get reservation by id
      operationId: getReservationByID
      parameters:
        - name: reservationId
          in: path
          description: Auto incremental reservation id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: List of reservations
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetReservationByIDResponse"
        default:
          $ref: "#/components/responses/GeneralError"
    put:
      summary: Update reservation data
      description: Update reservation data
      operationId: updateReservation
      x-permissions: ["update.reservations"]
      parameters:
        - name: reservationId
          in: path
          description: Auto incremental reservation id
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: Reservation Id and new data
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateReservationRequest"
      responses:
        "201":
          description: Reservation updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateReservationResponse"
        default:
          $ref: "#/components/responses/GeneralError"
    delete:
      summary: Delete reservation by id
      description: Delete reservation by id
      operationId: deleteReservation
      x-permissions: ["delete.reservations"]
      parameters:
        - name: reservationId
          in: path
          description: Auto incremental reservation id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Reservation deleted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteReservationResponse"
        default:
          $ref: "#/components/responses/GeneralError"

  /branches/{branchId}/availability:
    get:
      summary: Get available times in a given branch and shift
      description: Get available times in a given branch and shift
      operationId: getAvailableTimes
      parameters:
        - name: branchId
          in: path
          description: Branch id
          required: true
          schema:
            type: integer
            format: int32
        - name: date
          in: query
          description: Reservation date
          required: true
          schema:
            type: string
        - name: partySize
          in: query
          description: Party size
          required: true
          schema:
            type: integer
            format: int32
        - name: shiftId
          in: query
          description: Shift id
          required: true
          schema:
            type: integer
            format: int32
        - name: seatingAreaId
          in: query
          description: Seating area id
          required: false
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: List of available times
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetAvailableTimesResponse"
        default:
          $ref: "#/components/responses/GeneralError"

  /reservations/tags:
    get:
      summary: Get all reservation tags
      description: Get all reservation tags
      operationId: getAllReservationTags
      parameters:
        - name: query
          in: query
          description: Search for reservations tags by name
          required: false
          schema:
            type: string
      responses:
        "200":
          description: List of reservation tags
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetAllReservationTagsResponse"
        default:
          $ref: "#/components/responses/GeneralError"
    post:
      summary: Create a reservation tag
      description: Create a reservation tag
      operationId: createReservationCategoryTag
      requestBody:
        description: Reservation tag body
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateReservationCategoryTagRequest"
      responses:
        "200":
          description: Body of created tag
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateReservationCategoryTagResponse"
        default:
          $ref: "#/components/responses/GeneralError"

  /reservations/tags/{tagId}:
    get:
      summary: Get a tag by id
      description: Get a tag by id
      operationId: getReservationCategoryTagByID
      parameters:
        - name: tagId
          in: path
          description: Tag id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Reservation tag body
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetReservationCategoryTagByIDResponse"
        default:
          $ref: "#/components/responses/GeneralError"
    put:
      summary: Update a tag by id
      description: Update a tag by id
      operationId: updateReservationCategoryTag
      parameters:
        - name: tagId
          in: path
          description: Tag id
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: Reservation tag body
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateReservationCategoryTagRequest"
      responses:
        "200":
          description: Body of updated tag
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateReservationCategoryTagResponse"
        default:
          $ref: "#/components/responses/GeneralError"
    delete:
      summary: Delete a tag by id
      description: Delete a tag by id
      operationId: deleteReservationCategoryTag
      parameters:
        - name: tagId
          in: path
          description: Tag id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Body of deleted tag
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteTagResponse"
        default:
          $ref: "#/components/responses/GeneralError"

  /reservations/tags/categories:
    get:
      summary: Get all reservation tag categories
      description: Get all reservation tag categories
      operationId: getAllReservationTagCategories
      responses:
        "200":
          description: All reservation tag categories
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetAllReservationTagCategoriesResponse"
        default:
          $ref: "#/components/responses/GeneralError"
    post:
      summary: Create a reservation tag category
      description: Create a reservation tag category
      operationId: createReservationTagCategory
      requestBody:
        description: Reservation tag category body
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateReservationTagCategoryRequest"
      responses:
        "200":
          description: Body of created tag
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateReservationTagCategoryResponse"
        default:
          $ref: "#/components/responses/GeneralError"

  /reservations/tags/categories/{categoryId}:
    get:
      summary: Get a tag category by id
      description: Get a tag category by id
      operationId: getReservationTagCategoryByID
      parameters:
        - name: categoryId
          in: path
          description: Category id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Reservation tag category body
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetReservationTagCategoryByIDResponse"
        default:
          $ref: "#/components/responses/GeneralError"
    put:
      summary: Update a reservation tag category
      description: Update a reservation tag category
      operationId: updateReservationTagCategory
      parameters:
        - name: categoryId
          in: path
          description: Category id
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: Reservation tag category body
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateReservationTagCategoryRequest"
      responses:
        "200":
          description: Body of created tag
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateReservationTagCategoryResponse"
        default:
          $ref: "#/components/responses/GeneralError"
    delete:
      summary: Delete a reservation tag category
      description: Delete a reservation tag category
      operationId: deleteReservationTagCategory
      parameters:
        - name: categoryId
          in: path
          description: Category id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Response message
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteReservationTagCategoryResponse"
        default:
          $ref: "#/components/responses/GeneralError"

  /ws/reservations:
    get:
      summary: Get all reservations for websocket
      description: Get all reservations for websocket
      operationId: getRealtimeReservations
      parameters:
        - name: date
          in: query
          description: Reservation date
          required: false
          schema:
            type: string
        - name: shiftId
          in: query
          description: Shift id
          required: false
          schema:
            type: integer
            format: int32
        - name: authorization
          in: query
          description: Authorization token
          required: true
          schema:
            type: string
      responses:
        "200":
          description: List of reservations
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetReservationByIDResponse"
        default:
          $ref: "#/components/responses/GeneralError"

  /guests/tags:
    get:
      summary: Get all Guest tags
      description: Get all Guest tags
      operationId: getAllGuestTags
      parameters:
        - name: query
          in: query
          description: Search for guest tags by name
          required: false
          schema:
            type: string
      responses:
        "200":
          description: List of Guest tags
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetAllGuestTagsResponse"
        default:
          $ref: "#/components/responses/GeneralError"
    post:
      summary: Create a Guest tag
      description: Create a Guest tag
      operationId: createGuestCategoryTag
      requestBody:
        description: Guest tag body
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateGuestCategoryTagRequest"
      responses:
        "200":
          description: Body of created tag
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateGuestCategoryTagResponse"
        default:
          $ref: "#/components/responses/GeneralError"

  /guests/tags/{tagId}:
    get:
      summary: Get a tag by id
      description: Get a tag by id
      operationId: getGuestCategoryTagByID
      parameters:
        - name: tagId
          in: path
          description: Tag id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Guest tag body
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetGuestCategoryTagByIDResponse"
        default:
          $ref: "#/components/responses/GeneralError"
    put:
      summary: Update a tag by id
      description: Update a tag by id
      operationId: updateGuestCategoryTag
      parameters:
        - name: tagId
          in: path
          description: Tag id
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: Guest tag body
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateGuestCategoryTagRequest"
      responses:
        "200":
          description: Body of updated tag
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateGuestCategoryTagResponse"
        default:
          $ref: "#/components/responses/GeneralError"

    delete:
      summary: Delete a tag by id
      description: Delete a tag by id
      operationId: deleteGuestCategoryTag
      parameters:
        - name: tagId
          in: path
          description: Tag id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Response message
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteTagResponse"
        default:
          $ref: "#/components/responses/GeneralError"

  /guests/tags/categories:
    get:
      summary: Get all Guest tag categories
      description: Get all Guest tag categories
      operationId: getAllGuestTagCategories
      responses:
        "200":
          description: All Guest tag categories
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetAllGuestTagCategoriesResponse"
        default:
          $ref: "#/components/responses/GeneralError"
    post:
      summary: Create a Guest tag category
      description: Create a Guest tag category
      operationId: createGuestTagCategory
      requestBody:
        description: Guest tag category body
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateGuestTagCategoryRequest"
      responses:
        "200":
          description: Body of created tag
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateGuestTagCategoryResponse"
        default:
          $ref: "#/components/responses/GeneralError"

  /guests/tags/categories/{categoryId}:
    get:
      summary: Get a tag category by id
      description: Get a tag category by id
      operationId: getGuestTagCategoryByID
      parameters:
        - name: categoryId
          in: path
          description: Category id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Guest tag category body
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetGuestTagCategoryByIDResponse"
        default:
          $ref: "#/components/responses/GeneralError"
    put:
      summary: Update a Guest tag category
      description: Update a Guest tag category
      operationId: updateGuestTagCategory
      parameters:
        - name: categoryId
          in: path
          description: Category id
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: Guest tag category body
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateGuestTagCategoryRequest"
      responses:
        "200":
          description: Body of created tag
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateGuestTagCategoryResponse"
        default:
          $ref: "#/components/responses/GeneralError"
    delete:
      summary: Delete a guest tag category
      description: Delete a guest tag category
      operationId: deleteGuestTagCategory
      parameters:
        - name: categoryId
          in: path
          description: Category id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Response message
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteGuestTagCategoryResponse"
        default:
          $ref: "#/components/responses/GeneralError"

  /reservations/statuses:
    get:
      summary: Get all reservation statuses
      description: Get all reservation statuses
      operationId: getAllReservationStatuses
      parameters:
        - name: shortData
          in: query
          description: Whether to get short response or full
          required: false
          schema:
            type: boolean
        - name: branchIds
          in: query
          description: Branch ids
          required: false
          schema:
            type: string
      responses:
        "200":
          description: Reservation status body
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetAllReservationStatusesResponse"
        default:
          $ref: "#/components/responses/GeneralError"
    post:
      summary: Create a reservation status
      description: Create a reservation status
      operationId: createReservationStatus
      requestBody:
        description: Reservation status body
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateReservationStatusRequest"
      responses:
        "200":
          description: Body of created status
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateReservationStatusResponse"
        default:
          $ref: "#/components/responses/GeneralError"

  /reservations/statuses/{statusId}:
    get:
      summary: Get a reservation status by id
      description: Get a reservation status by id
      operationId: getReservationStatusByID
      parameters:
        - name: statusId
          in: path
          description: Status id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Reservation status body
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetReservationStatusByIDResponse"
        default:
          $ref: "#/components/responses/GeneralError"
    put:
      summary: Update a reservation status
      description: Update a reservation status
      operationId: updateReservationStatus
      requestBody:
        description: Reservation status body
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateReservationStatusRequest"
      responses:
        "200":
          description: Body of updated status
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateReservationStatusResponse"
        default:
          $ref: "#/components/responses/GeneralError"

  /reservations/{reservationId}/logs:
    get:
      summary: Get all logs for specific reservation
      description: Get all logs for specific reservation
      operationId: getAllReservationLogs
      parameters:
        - name: reservationId
          in: path
          description: reservation id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: List of all logs for specific reservation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetAllReservationLogsResponse"
        default:
          $ref: "#/components/responses/GeneralError"

  /reservations/{reservationId}/notes:
    post:
      summary: Create reservation/waiting reservation note
      description: Create reservation/waiting reservation note
      operationId: addReservationNote
      parameters:
        - name: reservationId
          in: path
          description: reservation id
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: Note body
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReservationNoteParams"
      responses:
        "201":
          description: Note added
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateReservationResponse"
        default:
          $ref: "#/components/responses/GeneralError"

  /reservations/{reservationId}/notes/{noteId}:
    put:
      summary: Update reservation note
      description: Update reservation note
      operationId: updateReservationNote
      parameters:
        - name: reservationId
          in: path
          description: reservation id
          required: true
          schema:
            type: integer
            format: int32
        - name: noteId
          in: path
          description: note id
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: Note body
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReservationNoteParams"
      responses:
        "201":
          description: Note updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReservationNote"
        default:
          $ref: "#/components/responses/GeneralError"
    delete:
      summary: Delete reservation note
      description: Delete reservation note
      operationId: deleteReservationNote
      parameters:
        - name: reservationId
          in: path
          description: reservation id
          required: true
          schema:
            type: integer
            format: int32
        - name: noteId
          in: path
          description: note id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "201":
          description: Note deleted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReservationNote"
        default:
          $ref: "#/components/responses/GeneralError"

  /branches:
    get:
      summary: Get all branches
      description: Get all branches
      operationId: getAllBranches
      responses:
        "200":
          description: List of all branches
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetAllBranchesResponse"

  /shifts:
    get:
      summary: Get all shift
      description: Get all shift
      operationId: getAllShifts
      parameters:
        - name: fromDate
          in: query
          description: Get shifts that available from this date
          required: false
          schema:
            type: string
        - name: toDate
          in: query
          description: Get shifts that available to this date
          required: false
          schema:
            type: string
        - name: perPage
          in: query
          description: Shifts per page
          required: false
          schema:
            type: integer
            format: int32
        - name: currentPage
          in: query
          description: Current page
          required: false
          schema:
            type: integer
            format: int32
        - name: active
          in: query
          description: Active shifts only
          required: false
          schema:
            type: boolean
        - name: branchId
          in: query
          description: Filter shifts by branch id
          required: false
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: List of all shifts
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetAllShiftsResponse"
        default:
          $ref: "#/components/responses/GeneralError"
    post:
      summary: Create a new shift
      description: Create a new shift
      operationId: createShift
      x-permissions: ["create.shifts"]
      requestBody:
        description: Shift body
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateShiftRequest"
      responses:
        "201":
          description: Shift created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateShiftResponse"
        default:
          $ref: "#/components/responses/GeneralError"

  /shifts/{shiftId}:
    get:
      summary: Get shift by id
      description: Get shift by id
      operationId: getShiftByID
      parameters:
        - name: shiftId
          in: path
          description: Auto incremental shift id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: List of shifts
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetShiftByIDResponse"
        default:
          $ref: "#/components/responses/GeneralError"
    put:
      summary: Update shift data
      description: Update shift data
      operationId: updateShift
      x-permissions: ["update.shifts"]
      parameters:
        - name: shiftId
          in: path
          description: Auto incremental shift id
          required: true
          schema:
            type: integer
            format: int32
        - name: editMode
          in: query
          description: The mode to edit the shift (current, following or all)
          required: false
          schema:
            type: string
        - name: deleteMode
          in: query
          description: The mode to delete the shift (current, following or all)
          required: false
          schema:
            type: string
        - name: date
          in: query
          description: The day to edit
          required: false
          schema:
            type: string
      requestBody:
        description: Shift Id and new data
        required: false
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateShiftRequest"
      responses:
        "201":
          description: Shift updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateShiftResponse"
        default:
          $ref: "#/components/responses/GeneralError"

  /shifts/categories:
    get:
      summary: Get all shift categories
      description: Get all shift categories
      operationId: getAllShiftCategories
      responses:
        "200":
          description: List of all shift categories
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetAllShiftCategoriesResponse"
        default:
          $ref: "#/components/responses/GeneralError"
    post:
      summary: Create a new shift category
      description: Create a new shift category
      operationId: createShiftCategory
      requestBody:
        description: Shift category body
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateShiftCategoryRequest"
      responses:
        "201":
          description: Shift category created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateShiftCategoryResponse"
        default:
          $ref: "#/components/responses/GeneralError"

  /seating-areas:
    get:
      summary: Get all seating areas
      description: Get all seating areas
      operationId: getAllSeatingAreas
      parameters:
        - name: branchId
          in: query
          description: Filter shifts by branch id
          required: false
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: List of all seating areas
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetAllSeatingAreasResponse"
        default:
          $ref: "#/components/responses/GeneralError"
    post:
      summary: Create a new seating area
      description: Create a new seating area
      operationId: createSeatingArea
      x-permissions: ["create.seating-areas"]
      requestBody:
        description: Seating area body
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateSeatingAreaRequest"
      responses:
        "201":
          description: Seating area created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateSeatingAreaResponse"
        default:
          $ref: "#/components/responses/GeneralError"

  /seating-areas/{seatingAreaId}:
    put:
      summary: Update seating area data
      description: Update seating area data
      operationId: updateSeatingArea
      x-permissions: ["update.seating-areas"]
      parameters:
        - name: seatingAreaId
          in: path
          description: Auto incremental seating area id
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: Seating area Id and new data
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateSeatingAreaRequest"
      responses:
        "201":
          description: Seating area updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateSeatingAreaResponse"
        default:
          $ref: "#/components/responses/GeneralError"
    delete:
      summary: Delete seating area
      description: Delete seating area
      operationId: deleteSeatingArea
      parameters:
        - name: seatingAreaId
          in: path
          description: Auto incremental seating area id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "201":
          description: Seating area deleted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteSeatingAreaResponse"
        default:
          $ref: "#/components/responses/GeneralError"

  /floor-plans:
    get:
      summary: Get all floor plans
      description: Get all floor plans
      operationId: getAllFloorPlans
      responses:
        "200":
          description: List of all floor plans
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetAllFloorPlansResponse"
        default:
          $ref: "#/components/responses/GeneralError"
    post:
      summary: Create floor plan
      description: Create floor plan
      operationId: createFloorPlan
      x-permissions: ["create.floor-plans"]
      requestBody:
        description: Body of floor plan
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateFloorPlanRequest"
      responses:
        "200":
          description: Body of created floor plan
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateFloorPlanResponse"
        default:
          $ref: "#/components/responses/GeneralError"

  /floor-plans/{id}:
    get:
      summary: Get floor plan by id
      description: Get floor plan by id
      operationId: getFloorPlanByID
      parameters:
        - name: id
          in: path
          description: Floor plan id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Floor plan body
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetFloorPlanByIDResponse"
        default:
          $ref: "#/components/responses/GeneralError"
    put:
      summary: Update floor plan
      description: Update floor plan
      operationId: updateFloorPlan
      x-permissions: ["update.floor-plans"]
      parameters:
        - name: id
          in: path
          description: Floor plan id
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: Body of updated floor plan
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateFloorPlanRequest"
      responses:
        "200":
          description: Body of updated floor plan
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateFloorPlanResponse"
        default:
          $ref: "#/components/responses/GeneralError"
    delete:
      summary: Delete floor plan
      description: Delete floor plan
      operationId: deleteFloorPlan
      x-permissions: ["delete.floor-plans"]
      parameters:
        - name: id
          in: path
          description: Floor plan id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Result of operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteFloorPlanResponse"
        default:
          $ref: "#/components/responses/GeneralError"

  /floor-plans/{id}/layouts:
    post:
      summary: Create new floor plan layout
      description: Create new floor plan layout
      operationId: createFloorPlanLayout
      parameters:
        - name: id
          in: path
          description: Floor plan id
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: Body of floor plan layout
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateFloorPlanLayoutRequest"
      responses:
        "200":
          description: Body of created floor plan layout
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateFloorPlanLayoutResponse"
        default:
          $ref: "#/components/responses/GeneralError"

  /tables:
    get:
      summary: Get all tables
      description: Get all tables
      operationId: getAllTables
      parameters:
        - name: branch
          in: query
          description: Filter tables by branches
          required: false
          schema:
            type: string
      responses:
        "200":
          description: All tables
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetAllTablesResponse"
        default:
          $ref: "#/components/responses/GeneralError"
    post:
      summary: Create tables
      description: Create tables
      operationId: createTable
      x-permissions: ["create.tables"]
      requestBody:
        description: Table body
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateTableRequest"
      responses:
        "200":
          description: Created table
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateTableResponse"
        default:
          $ref: "#/components/responses/GeneralError"
  /tables/{id}:
    put:
      summary: Update table
      description: Update table
      operationId: updateTable
      x-permissions: ["update.tables"]
      parameters:
        - name: id
          in: path
          description: Table number
          required: true
          schema:
            type: string
        - name: moveReservations
          in: query
          required: false
          schema:
            type: boolean
      requestBody:
        description: Update table body
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateTableRequest"
      responses:
        "200":
          description: Update table body
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateTableResponse"
        default:
          $ref: "#/components/responses/GeneralError"
    delete:
      summary: Delete table
      description: Delete table
      operationId: deleteTable
      parameters:
        - name: id
          in: path
          description: Table number
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Deleted table
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteTableResponse"
        default:
          $ref: "#/components/responses/GeneralError"

  /tables/{id}/mark:
    put:
      summary: Mark table
      description: Mark table
      operationId: markTable
      x-permissions: ["update.tables"]
      parameters:
        - name: id
          in: path
          description: Table number
          required: true
          schema:
            type: string
      requestBody:
        description: Mark table body
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MarkTableRequest"
      responses:
        "200":
          description: Mark table body
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MarkTableResponse"
        default:
          $ref: "#/components/responses/GeneralError"

  /countries:
    get:
      summary: Get all countries
      description: Get all countries
      operationId: getAllCountries
      responses:
        "200":
          description: List of all countries
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetAllCountriesResponse"
        default:
          $ref: "#/components/responses/GeneralError"

  /countries/{countryName}:
    get:
      summary: Get country by name
      description: Get country by name
      operationId: getCountryByName
      parameters:
        - name: countryName
          in: path
          description: Country name
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Country
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetCountryByNameResponse"
        default:
          $ref: "#/components/responses/GeneralError"

  /reservations/{reservationId}/tables:
    put:
      summary: Update the tables associated to reservation
      description: Update the tables associated to reservation
      operationId: updateReservationTable
      x-permissions: ["change-table.reservations"]
      parameters:
        - name: reservationId
          in: path
          description: Reservation id
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: Table ids
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateReservationTableRequest"
      responses:
        "200":
          description: Created reservation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateWaitingReservationResponse"
        default:
          $ref: "#/components/responses/GeneralError"

  /reservations/waitlist:
    get:
      summary: Get all waiting reservations
      description: Get all waiting reservations
      operationId: getAllWaitingReservations
      parameters:
        - name: shiftId
          in: query
          description: Shift id
          required: true
          schema:
            type: integer
            format: int32
        - name: date
          in: query
          description: Date
          required: true
          schema:
            type: string
      responses:
        "200":
          description: List of all waiting reservations
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetAllWaitingReservationsResponse"
        default:
          $ref: "#/components/responses/GeneralError"
    post:
      summary: Add new waiting reservation
      description: Add new waiting reservation
      operationId: createWaitingReservation
      x-permissions: ["create.reservations"]
      requestBody:
        description: Reservation body
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateWaitingReservationRequest"
      responses:
        "200":
          description: Created waiting reservation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateWaitingReservationResponse"
        default:
          $ref: "#/components/responses/GeneralError"

  /reservations/waitlist/{reservationWaitlistId}:
    post:
      summary: Move from waiting list to reservations
      description: Move from waiting list to reservations
      operationId: seatWaitingReservation
      parameters:
        - name: reservationWaitlistId
          in: path
          description: Waiting reservation id
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: Tables ids
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateWaitingReservationRequest"
      responses:
        "200":
          description: Created waiting reservation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateWaitingReservationResponse"
        default:
          $ref: "#/components/responses/GeneralError"
    put:
      summary: Update the details of waiting reservation
      description: Update the details of waiting reservation
      operationId: updateWaitingReservationDetails
      x-permissions: ["update.reservations"]
      parameters:
        - name: reservationWaitlistId
          in: path
          description: Waiting reservation id
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: Waiting reservation details
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateWaitingReservationDetailsRequest"
      responses:
        "200":
          description: Updated waiting reservation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateWaitingReservationDetailsResponse"
        default:
          $ref: "#/components/responses/GeneralError"

  /ws/reservations/waitlist:
    get:
      summary: Get all waiting reservations
      description: Get all waiting reservations
      operationId: getRealtimeWaitingReservations
      parameters:
        - name: shiftId
          in: query
          description: Shift id
          required: true
          schema:
            type: integer
            format: int32
        - name: date
          in: query
          description: Date
          required: true
          schema:
            type: string
        - name: authorization
          in: query
          description: Authorization token
          required: true
          schema:
            type: string
      responses:
        "200":
          description: List of all waiting reservations
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetWaitingReservationResponse"
        default:
          $ref: "#/components/responses/GeneralError"

  /guests/{guestId}/reports/statistics:
    get:
      summary: Get guest statistics
      description: Get guest statistics
      operationId: getGuestStatistics
      x-permissions: ["read-report.guests"]
      parameters:
        - name: guestId
          in: path
          description: Guest id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Guest statistics body
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetGuestStatisticsResponse"
        default:
          $ref: "#/components/responses/GeneralError"

  /guests/{guestId}/reports/spending:
    get:
      summary: Get guest spending
      description: Get guest spending
      operationId: getGuestSpending
      parameters:
        - name: guestId
          in: path
          description: Guest id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Guest spending body
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetGuestSpendingResponse"
        default:
          $ref: "#/components/responses/GeneralError"

  /guests/{guestId}/reports/reservations/statistics:
    get:
      summary: Get guest reservation statistics
      description: Get guest reservation statistics
      operationId: getGuestReservationStatistics
      x-permissions: ["read-financials.reservations"]
      parameters:
        - name: guestId
          in: path
          description: Guest id
          required: true
          schema:
            type: integer
            format: int32
        - name: fromDate
          in: query
          description: starting date
          required: false
          schema:
            type: string
        - name: toDate
          in: query
          description: ending date
          required: false
          schema:
            type: string
        - name: queryType
          in: query
          description: type of query
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Guest reservation statistics body
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetGuestReservationStatisticsResponse"
        default:
          $ref: "#/components/responses/GeneralError"

  /reservations/special-occasions:
    get:
      summary: Get all special occasions
      description: Get all special occasions
      operationId: getAllSpecialOccasions
      responses:
        "200":
          description: Special occasions list
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetAllSpecialOccasionsResponse"
        default:
          $ref: "#/components/responses/GeneralError"

  /employees/reservations/count:
    get:
      summary: Get all employees reservations count
      description: Get all employees reservations count
      operationId: getEmployeesReservationsCount
      x-permissions: ["dashboard.customer-service"]
      responses:
        "200":
          description: Employees reservations count
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetEmployeesReservationsCountResponse"
        default:
          $ref: "#/components/responses/GeneralError"
      tags:
        - customer-service

  /branches/switch/{branchId}:
    put:
      summary: Switch user current branch
      description: Switch user current branch
      operationId: switchBranch
      parameters:
        - name: branchId
          in: path
          description: Branch id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Branch switched
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SwitchBranchResponse"
        default:
          $ref: "#/components/responses/GeneralError"

  /inquiries:
    get:
      summary: Get all inquiries
      description: Get all inquiries
      operationId: getAllInquiries
      x-permissions: ["dashboard.customer-service"]
      parameters:
        - name: perPage
          in: query
          description: Guests per page
          required: true
          schema:
            type: integer
            format: int32
        - name: currentPage
          in: query
          description: Current page
          required: true
          schema:
            type: integer
            format: int32
        - name: query
          in: query
          description: Search query
          required: false
          schema:
            type: string
        - name: fromDate
          in: query
          description: From Date
          required: false
          schema:
            type: string
        - name: toDate
          in: query
          description: To Date
          required: false
          schema:
            type: string
        - name: branch
          in: query
          description: Branch ids
          required: false
          schema:
            type: array
            items:
              type: integer
              format: int32
        - name: status
          in: query
          description: Status ids
          schema:
            type: array
            items:
              type: integer
              format: int32
        - name: reservationId
          in: query
          description: Reservation id
          required: false
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: List of all inquiries
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetAllInquiriesResponse"
        default:
          $ref: "#/components/responses/GeneralError"
    post:
      summary: Create new inquiry
      description: Create new inquiry
      operationId: createInquiry
      requestBody:
        description: Inquiry body
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateInquiryRequest"
      responses:
        "200":
          description: Created inquiry
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateInquiryResponse"
        default:
          $ref: "#/components/responses/GeneralError"

  /inquiries/{inquiryId}:
    get:
      summary: Get inquiry by id
      description: Get inquiry by id
      operationId: getInquiryByID
      x-permissions: ["dashboard.customer-service"]
      parameters:
        - name: inquiryId
          in: path
          description: Inquiry id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Inquiry
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetInquiryByIdResponse"
        default:
          $ref: "#/components/responses/GeneralError"
    put:
      summary: Update inquiry
      description: Update inquiry
      operationId: updateInquiry
      x-permissions: ["dashboard.customer-service"]
      parameters:
        - name: id
          in: path
          description: Inquiry id
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: Inquiry body
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateInquiryRequest"
      responses:
        "200":
          description: Updated inquiry
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateInquiryResponse"
        default:
          $ref: "#/components/responses/GeneralError"

  /top-employees:
    get:
      summary: Get top employees
      description: Get top employees
      operationId: getTopEmployees
      x-permissions: ["dashboard.customer-service"]
      parameters:
        - name: limit
          in: query
          description: Number of employees
          required: false
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: List of top employees
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetTopEmployeesResponse"
        default:
          $ref: "#/components/responses/GeneralError"

  /reservations-inquiries/count:
    get:
      summary: Get all reservations inquiries count
      description: Get all reservations inquiries count
      operationId: getReservationInquiryStatistics
      x-permissions: ["dashboard.customer-service"]
      responses:
        "200":
          description: Reservations inquiries count
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetReservationInquiryStatisticsResponse"
        default:
          $ref: "#/components/responses/GeneralError"
      tags:
        - customer-service

  /inquiries/{inquiryId}/comments:
    get:
      summary: Get all inquiry comments
      description: Get all inquiry comments
      operationId: getAllInquiryComments
      x-permissions: ["dashboard.customer-service"]
      parameters:
        - name: inquiryId
          in: path
          description: Inquiry id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: All comments
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetAllInquiryCommentsResponse"
        default:
          $ref: "#/components/responses/GeneralError"
    post:
      summary: Create comment for specific inquiry
      description: Create comment for specific inquiry
      operationId: createInquiryComment
      x-permissions: ["dashboard.customer-service"]
      parameters:
        - name: inquiryId
          in: path
          description: Inquiry id
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: InquiryComment body
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateInquiryCommentRequest"
      responses:
        "200":
          description: InquiryComment body
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateInquiryCommentResponse"

  /inquiries/{inquiryId}/comments/{commentId}:
    put:
      summary: Update comment
      description: Update comment
      operationId: updateInquiryComment
      x-permissions: ["dashboard.customer-service"]
      parameters:
        - name: inquiryId
          in: path
          description: Inquiry id
          required: true
          schema:
            type: integer
            format: int32
        - name: commentId
          in: path
          description: Comment id
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: Comment body
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateInquiryCommentRequest"
      responses:
        "200":
          description: Updated comment
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateInquiryCommentResponse"
        default:
          $ref: "#/components/responses/GeneralError"

  /reservations/feedbacks:
    get:
      summary: Get all reservation feedbacks
      description: Get all reservation feedbacks
      operationId: getAllReservationsFeedbacks
      parameters:
        - name: perPage
          in: query
          description: Guests per page
          required: true
          schema:
            type: integer
            format: int32
        - name: currentPage
          in: query
          description: Current page
          required: true
          schema:
            type: integer
            format: int32
        - name: query
          in: query
          description: Search query
          required: false
          schema:
            type: string
        - name: fromDate
          in: query
          description: Get feedbacks that created from this date
          required: false
          schema:
            type: string
        - name: toDate
          in: query
          description: Get feedbacks that created to this date
          required: false
          schema:
            type: string
        - name: branch
          in: query
          description: Get feedbacks that created in these branches
          required: false
          schema:
            type: string
        - name: status
          in: query
          description: Get feedbacks that have this status (pending, solved)
          schema:
            type: string
        - name: rate
          in: query
          description: Get feedbacks that have this rate (positive, negative, neutral)
          schema:
            type: string
      responses:
        "200":
          description: List of all reservation feedbacks
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetAllReservationFeedbacksResponse"
        default:
          $ref: "#/components/responses/GeneralError"

  /reservations/{reservationId}/feedbacks:
    post:
      summary: Create feedback for specific reservation
      description: Create feedback for specific reservation
      operationId: createReservationFeedback
      parameters:
        - name: reservationId
          in: path
          description: Reservation id
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: ReservationFeedback body
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateReservationFeedbackRequest"
      responses:
        "200":
          description: ReservationFeedback body
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateReservationFeedbackResponse"
        default:
          $ref: "#/components/responses/GeneralError"

  /reservations/{reservationId}/feedbacks/{feedbackId}:
    get:
      summary: Get feedback by id
      description: Get feedback by id
      operationId: getReservationFeedbackByID
      parameters:
        - name: reservationId
          in: path
          description: Reservation id
          required: true
          schema:
            type: integer
            format: int32
        - name: feedbackId
          in: path
          description: Feedback id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Feedback
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetReservationFeedbackByIdResponse"
        default:
          $ref: "#/components/responses/GeneralError"
    put:
      summary: Update feedback
      description: Update feedback
      operationId: updateReservationFeedback
      parameters:
        - name: reservationId
          in: path
          description: Reservation id
          required: true
          schema:
            type: integer
            format: int32
        - name: feedbackId
          in: path
          description: Feedback id
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: Feedback body
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateReservationFeedbackRequest"
      responses:
        "200":
          description: Updated feedback
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateReservationFeedbackResponse"
        default:
          $ref: "#/components/responses/GeneralError"

  /reservations/{reservationId}/orders:
    get:
      summary: Get reservation order by reservation id
      description: Get reservation order by reservation id
      operationId: getReservationOrderByReservationId
      x-permissions: ["read-financials.reservations"]
      parameters:
        - name: reservationId
          in: path
          description: Reservation id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Order
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetOrderByReservationIdResponse"
        default:
          $ref: "#/components/responses/GeneralError"

  /inquiries/{inquiryId}/solutions:
    post:
      summary: Add solution to inquiry
      description: Add solution to inquiry
      operationId: createInquirySolution
      x-permissions: ["dashboard.customer-service"]
      parameters:
        - name: inquiryId
          in: path
          description: Inquiry id
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: Solution body
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddInquirySolutionRequest"
      responses:
        "200":
          description: Added solution
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AddInquirySolutionResponse"
        default:
          $ref: "#/components/responses/GeneralError"

  /reservations/feedbacks/{feedbackId}/comments:
    get:
      summary: Get all reservation feedback comments
      description: Get all reservation feedback comments
      operationId: getAllReservationFeedbackComments
      parameters:
        - name: feedbackId
          in: path
          description: Reservation Feedback id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: All comments
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetAllReservationFeedbackCommentsResponse"
        default:
          $ref: "#/components/responses/GeneralError"
    post:
      summary: Create comment for specific inquiry
      description: Create comment for specific inquiry
      operationId: createReservationFeedbackComment
      parameters:
        - name: inquiryId
          in: path
          description: Reservation Feedback id
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: Reservation Feedback Comment body
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateReservationFeedbackCommentRequest"
      responses:
        "200":
          description: Reservation Feedback Comment body
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateReservationFeedbackCommentResponse"

  /reservations/feedbacks/{feedbackId}/comments/{commentId}:
    put:
      summary: Update comment
      description: Update comment
      operationId: updateReservationFeedbackComment
      parameters:
        - name: feedbackId
          in: path
          description: ReservationFeedback id
          required: true
          schema:
            type: integer
            format: int32
        - name: commentId
          in: path
          description: Comment id
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: Comment body
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateReservationFeedbackCommentRequest"
      responses:
        "200":
          description: Updated comment
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateReservationFeedbackCommentResponse"
        default:
          $ref: "#/components/responses/GeneralError"

  /reservations/feedbacks/{feedbackId}/solutions:
    post:
      summary: Add solution to feedback
      description: Add solution to feedback
      operationId: addReservationFeedbackSolution
      parameters:
        - name: feedbackId
          in: path
          description: Feedback id
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: Solution body
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddReservationFeedbackSolutionRequest"
      responses:
        "200":
          description: Added solution
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AddReservationFeedbackSolutionResponse"
        default:
          $ref: "#/components/responses/GeneralError"

  /reservations/feedbacks/sections:
    get:
      summary: Get all reservation feedback sections
      description: Get all reservation feedback sections
      operationId: getAllReservationFeedbackSections
      responses:
        "200":
          description: All sections
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetAllFeedbackSectionsResponse"
        default:
          $ref: "#/components/responses/GeneralError"

  /webhooks/reservation/feedback:
    post:
      summary: Create new reservation feedback
      description: Create new reservation feedback
      operationId: createReservationFeedbackFromWebhook
      requestBody:
        description: Reservation body
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateReservationFeedbackWebhookRequest"
      responses:
        "200":
          description: Created reservation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateReservationFeedbackWebhookResponse"

  /webhooks/reservation:
    post:
      summary: Update reservation from webhook
      description: Update reservation status from webhook
      operationId: updateReservationFromWebhook
      requestBody:
        description: Reservation body
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateReservationFromWebhookRequest"
      responses:
        "200":
          description: Updated reservation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateReservationFromWebhookResponse"

  /webhooks/request-reservation:
    post:
      summary: Request reservation webhook
      description: Request reservation webhook
      operationId: requestReservationWebhook
      requestBody:
        description: Reservation data
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RequestReservationWebhookRequest"
      responses:
        "200":
          description: Webhook response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RequestReservationWebhookResponse"
        default:
          $ref: "#/components/responses/GeneralError"

  /reports/employees:
    get:
      summary: Get all employees reports
      description: Get all employees reports
      operationId: getAllEmployeesReports
      x-permissions: ["report.customer-service", "dashboard.customer-service"]
      parameters:
        - name: perPage
          in: query
          description: Number of records per page
          schema:
            type: integer
            format: int32
        - name: currentPage
          in: query
          description: Page number
          schema:
            type: integer
            format: int32
        - name: branch
          in: query
          description: Branch ids
          schema:
            type: string
        - name: fromDate
          in: query
          description: From date
          schema:
            type: string
            format: date
        - name: toDate
          in: query
          description: To date
          schema:
            type: string
            format: date
        - name: query
          in: query
          description: Query
          schema:
            type: string
      responses:
        "200":
          description: All employees reports
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetAllEmployeesReportsResponse"
        default:
          $ref: "#/components/responses/GeneralError"

  /reports/employees/{employeeId}:
    get:
      summary: Get employee report
      description: Get employee report
      operationId: getEmployeeReport
      parameters:
        - name: employeeId
          in: path
          description: Employee id
          required: true
          schema:
            type: integer
            format: int32
        - name: perPage
          in: query
          description: Number of records per page
          schema:
            type: integer
            format: int32
        - name: currentPage
          in: query
          description: Page number
          schema:
            type: integer
            format: int32
        - name: type
          in: query
          description: Type
          schema:
            type: string
        - name: inquiryStatus
          in: query
          description: Inquiry status
          schema:
            type: string
        - name: reservationStatus
          in: query
          description: Reservation status
          schema:
            type: string
        - name: fromDate
          in: query
          description: From date
          schema:
            type: string
            format: date
        - name: toDate
          in: query
          description: To date
          schema:
            type: string
            format: date
        - name: query
          in: query
          description: Query
          schema:
            type: string
      responses:
        "200":
          description: Employee report
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetEmployeeReportResponse"
        default:
          $ref: "#/components/responses/GeneralError"

  /users:
    get:
      summary: Get all users
      description: Get all users
      operationId: getAllUsers
      x-permissions: ["access.users"]
      parameters:
        - name: perPage
          in: query
          description: Number of records per page
          schema:
            type: integer
            format: int32
        - name: currentPage
          in: query
          description: Page number
          schema:
            type: integer
            format: int32
        - name: department
          in: query
          description: Department ids
          schema:
            type: integer
            format: int32
        - name: role
          in: query
          description: Role ids
          schema:
            type: integer
            format: int32
        - name: fromDate
          in: query
          description: From date
          schema:
            type: string
            format: date
        - name: toDate
          in: query
          description: To date
          schema:
            type: string
            format: date
        - name: query
          in: query
          description: Query
          schema:
            type: string
      responses:
        "200":
          description: All users
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetAllUsersResponse"
        default:
          $ref: "#/components/responses/GeneralError"
    post:
      summary: Create new user
      description: Create new user
      operationId: createUser
      x-permissions: ["access.users"]
      requestBody:
        description: User body
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUserRequest"
      responses:
        "200":
          description: Created user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateUserResponse"
        default:
          $ref: "#/components/responses/GeneralError"

  /users/{userId}:
    get:
      summary: Get user by id
      description: Get user by id
      operationId: getUserByID
      x-permissions: ["access.users"]
      parameters:
        - name: userId
          in: path
          description: User id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: User
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetUserByIDResponse"
        default:
          $ref: "#/components/responses/GeneralError"
    put:
      summary: Update user
      description: Update user
      operationId: updateUser
      x-permissions: ["access.users"]
      parameters:
        - name: userId
          in: path
          description: User id
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: User body
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUserRequest"
      responses:
        "200":
          description: Updated user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateUserResponse"
        default:
          $ref: "#/components/responses/GeneralError"
    delete:
      summary: Delete user
      description: Delete user
      operationId: deleteUser
      x-permissions: ["access.users"]
      parameters:
        - name: userId
          in: path
          description: User id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Deleted user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteUserResponse"
        default:
          $ref: "#/components/responses/GeneralError"

  /users/roles:
    get:
      summary: Get all roles
      description: Get all roles
      operationId: getAllRoles
      x-permissions: ["access.users"]
      parameters:
        - name: perPage
          in: query
          description: Number of records per page
          schema:
            type: integer
            format: int32
        - name: currentPage
          in: query
          description: Page number
          schema:
            type: integer
            format: int32
        - name: department
          in: query
          description: Department ids
          schema:
            type: integer
            format: int32
        - name: query
          in: query
          description: Query
          schema:
            type: string
      responses:
        "200":
          description: All roles
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetAllRolesResponse"
        default:
          $ref: "#/components/responses/GeneralError"
    post:
      summary: Create new role
      description: Create new role
      x-permissions: ["access.users"]
      operationId: createRole
      requestBody:
        description: Role body
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateRoleRequest"
      responses:
        "200":
          description: Created role
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateRoleResponse"
        default:
          $ref: "#/components/responses/GeneralError"

  /users/roles/{roleId}:
    get:
      summary: Get role by id
      description: Get role by id
      x-permissions: ["access.users"]
      operationId: getRoleByID
      parameters:
        - name: roleId
          in: path
          description: Role id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Role
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetRoleByIDResponse"
        default:
          $ref: "#/components/responses/GeneralError"
    put:
      summary: Update role
      description: Update role
      operationId: updateRole
      x-permissions: ["access.users"]
      parameters:
        - name: roleId
          in: path
          description: Role id
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: Role body
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateRoleRequest"
      responses:
        "200":
          description: Updated role
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateRoleResponse"
        default:
          $ref: "#/components/responses/GeneralError"
    delete:
      summary: Delete role
      description: Delete role
      operationId: deleteRole
      x-permissions: ["access.users"]
      parameters:
        - name: roleId
          in: path
          description: Role id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Deleted role
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteRoleResponse"
        default:
          $ref: "#/components/responses/GeneralError"

  /users/roles/permissions:
    get:
      summary: Get all permissions
      description: Get all permissions
      operationId: getAllPermissions
      parameters:
        - name: department
          in: query
          description: Department ids
          schema:
            type: integer
            format: int32
        - name: query
          in: query
          description: Query
          schema:
            type: string
      responses:
        "200":
          description: All permissions
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetAllPermissionsResponse"
        default:
          $ref: "#/components/responses/GeneralError"

  /users/departments:
    get:
      summary: Get all departments
      description: Get all departments
      operationId: getAllDepartments
      parameters:
        - name: perPage
          in: query
          description: Number of records per page
          schema:
            type: integer
            format: int32
        - name: currentPage
          in: query
          description: Page number
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: All departments
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetAllDepartmentsResponse"
        default:
          $ref: "#/components/responses/GeneralError"

  /guests/{guestId}/inquiries:
    get:
      summary: Get guest inquiries
      description: Get guest inquiries
      operationId: getGuestInquiries
      x-permissions: ["dashboard.customer-service"]
      parameters:
        - name: guestId
          in: path
          description: Guest id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Guest inquiries
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetGuestInquiriesResponse"
        default:
          $ref: "#/components/responses/GeneralError"

  /day-closed:
    get:
      summary: Check if the day is closed
      description: Check if the day is closed
      operationId: checkIfDayClosed
      parameters:
        - name: date
          in: query
          description: The date to check
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Day is closed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CheckIfDayClosedResponse"
        default:
          $ref: "#/components/responses/GeneralError"

  /close-day-operations:
    post:
      summary: Close day operations
      description: Executes daily closure operations by moving all upcoming reservations to no-show status, marking seated reservations as left, performing end-of-day tasks, and dispatching a daily report with statistics to the management.
      operationId: closeDayOperations
      x-permissions: ["end-day.shifts"]
      parameters:
        - name: date
          in: query
          description: The date to close
          required: true
          schema:
            type: string
      responses:
        "200":
          description: End the day
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CloseDayOperationsResponse"
        default:
          $ref: "#/components/responses/GeneralError"

  /reservations/waitlist/{reservationWaitlistId}/notes:
    post:
      summary: Add note to waitlist
      description: Add note to waitlist
      operationId: addWaitingReservationNote
      parameters:
        - name: reservationWaitlistId
          in: path
          description: Auto incremental id
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: Reservation waitlist note data
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddWaitingReservationNoteRequest"
      responses:
        "201":
          description: Note added
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AddWaitingReservationNoteResponse"
        default:
          $ref: "#/components/responses/GeneralError"

  /reservations/waitlist/{reservationWaitlistId}/notes/{noteId}:
    put:
      summary: Update note in waitlist
      description: Update note in waitlist
      operationId: updateWaitingReservationNote
      parameters:
        - name: noteId
          in: path
          description: Auto incremental id
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: Reservation waitlist note data
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateWaitingReservationNoteRequest"
      responses:
        "200":
          description: Note updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateWaitingReservationNoteResponse"
        default:
          $ref: "#/components/responses/GeneralError"

  /reservations/waitlist/{reservationWaitlistId}/logs:
    get:
      summary: Get all logs for specific waitlist
      description: Get all logs for specific waitlist
      operationId: getAllReservationWaitlistLogs
      parameters:
        - name: reservationWaitlistId
          in: path
          description: reservation waitlist id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: List of all logs for specific reservation waitlist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetAllReservationWaitlistLogsResponse"

  /users/password/change:
    post:
      summary: Change password
      description: Change password
      operationId: changePassword
      requestBody:
        description: Password change data
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChangePasswordRequest"
      responses:
        "200":
          description: Password changed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChangePasswordResponse"
        default:
          $ref: "#/components/responses/GeneralError"
      tags:
        - user

  /users/password/reset:
    post:
      summary: Request reset password
      description: Request Reset password
      operationId: requestResetPassword
      requestBody:
        description: Password reset data
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RequestResetPasswordRequest"
      responses:
        "200":
          description: Password reset
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RequestResetPasswordResponse"
        default:
          $ref: "#/components/responses/GeneralError"

  /users/otp/verify:
    post:
      summary: Verify OTP
      description: Verify OTP
      operationId: verifyOtp
      requestBody:
        description: OTP body
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VerifyOtpRequest"
      responses:
        "200":
          description: OTP verified
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VerifyOtpResponse"
        default:
          $ref: "#/components/responses/GeneralError"

  /users/otp/resend:
    post:
      summary: Resend OTP
      description: Resend OTP
      operationId: resendOtp
      requestBody:
        description: OTP body
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ResendOtpRequest"
      responses:
        "200":
          description: OTP resent
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResendOtpResponse"
        default:
          $ref: "#/components/responses/GeneralError"

  /users/password/new:
    post:
      summary: Change password after reset request
      description: Change password after reset request
      operationId: resetPassword
      requestBody:
        description: Password change data
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ResetPasswordRequest"
      responses:
        "200":
          description: Password changed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResetPasswordResponse"
        default:
          $ref: "#/components/responses/GeneralError"

  /integrations:
    post:
      summary: Create new integration
      description: Create new integration
      operationId: createIntegration
      requestBody:
        description: Integration body
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateIntegrationRequest"
      responses:
        "200":
          description: Created integration
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateIntegrationResponse"
        default:
          $ref: "#/components/responses/GeneralError"

  /reservations/cover-flow:
    get:
      summary: Get reservations cover flow
      description: Get reservations cover flow
      operationId: getReservationsCoverFlow
      parameters:
        - name: shiftId
          in: query
          description: Shift id
          required: true
          schema:
            type: integer
            format: int32
        - name: date
          in: query
          description: Date
          required: true
          schema:
            type: string
        - name: seatingArea
          in: query
          description: Seating Area ids
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Reservations cover flow
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetReservationsCoverFlowResponse"
        default:
          $ref: "#/components/responses/GeneralError"

  /automated-reports:
    get:
      summary: Get all reports
      description: Get all reports
      operationId: getAllAutomatedReports
      responses:
        "200":
          description: List of all reports
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetAllAutomatedReportsResponse"
        default:
          $ref: "#/components/responses/GeneralError"
    post:
      summary: Create new report
      description: Create new report that will be sent to the selected users on a scheduled basis
      operationId: createAutomatedReport
      requestBody:
        description: Report body
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateAutomatedReportRequest"
      responses:
        "200":
          description: Created report
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateAutomatedReportResponse"
        default:
          $ref: "#/components/responses/GeneralError"

  /automated-reports/{reportId}:
    get:
      summary: Get automated report by id
      description: Get automated report by ID to see the details of the report
      operationId: getAutomatedReportByID
      parameters:
        - name: reportId
          in: path
          description: Report id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Report details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetAutomatedReportByIdResponse"
        default:
          $ref: "#/components/responses/GeneralError"
    put:
      summary: Update automated report by id
      description: Update automated report by ID to change the details of the report
      operationId: updateAutomatedReport
      parameters:
        - name: reportId
          in: path
          description: Report id
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: Report body
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateAutomatedReportRequest"
      responses:
        "200":
          description: Updated report
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateAutomatedReportResponse"
        default:
          $ref: "#/components/responses/GeneralError"
    delete:
      summary: Delete automated report by id
      description: Delete automated report by ID
      operationId: deleteAutomatedReport
      parameters:
        - name: reportId
          in: path
          description: Report id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Deleted report
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteAutomatedReportResponse"
        default:
          $ref: "#/components/responses/GeneralError"

  /report-types/automated:
    get:
      summary: Get all automated report types
      description: Get all automated reports types
      operationId: getAllAutomatedReportTypes
      responses:
        "200":
          description: List of all report types
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetAllAutomatedReportTypesResponse"
        default:
          $ref: "#/components/responses/GeneralError"

  /messages:
    post:
      summary: Send message
      description: Send message
      operationId: sendMessage
      requestBody:
        description: Message body
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SendMessageRequest"
      responses:
        "200":
          description: Sent message
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SendMessageResponse"
        default:
          $ref: "#/components/responses/GeneralError"
    get:
      summary: Get all messages
      description: Get all messages
      operationId: getAllMessages
      parameters:
        - name: currentPage
          in: query
          description: Current page
          schema:
            type: integer
            format: int32
        - name: perPage
          in: query
          description: Page size
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: All messages
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetAllMessagesResponse"
        default:
          $ref: "#/components/responses/GeneralError"

  /messages/{messageId}/toggle:
    put:
      summary: Mark message as read/unread
      description: Mark message as read/unread
      operationId: toggleMessage
      parameters:
        - name: messageId
          in: path
          description: Message id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Message marked as read/unread
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ToggleMessageResponse"
        default:
          $ref: "#/components/responses/GeneralError"

  /ws/messages:
    get:
      summary: Get new messages
      description: Get new messages
      operationId: getNewMessages
      responses:
        "200":
          description: New messages
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetAllMessagesResponse"
        default:
          $ref: "#/components/responses/GeneralError"

  /widget/settings:
    get:
      summary: Get widget settings
      description: Get client widget settings
      operationId: getWidgetSettings
      responses:
        "200":
          description: Client widget settings
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetWidgetSettingsResponse"
        default:
          $ref: "#/components/responses/GeneralError"

  /widget/branches/{branchId}/availability:
    get:
      summary: Get available times in a given branch and shift
      description: Get available times in a given branch and shift
      operationId: getWidgetAvailableTimes
      parameters:
        - name: branchId
          in: path
          description: Branch id
          required: true
          schema:
            type: integer
            format: int32
        - name: fromDate
          in: query
          description: From date
          required: true
          schema:
            type: string
            format: date
        - name: toDate
          in: query
          description: To date
          required: true
          schema:
            type: string
            format: date
        - name: partySize
          in: query
          description: Party size
          required: true
          schema:
            type: integer
            format: int32
        - name: shiftId
          in: query
          description: Shift id
          required: true
          schema:
            type: integer
            format: int32
        - name: seatingAreaId
          in: query
          description: Seating area id
          required: false
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: List of available times
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetWidgetAvailableTimesResponse"
        default:
          $ref: "#/components/responses/GeneralError"

  /widget/seating-areas:
    get:
      summary: Get all seating areas
      description: Get all seating areas
      operationId: getWidgetAllSeatingAreas
      parameters:
        - name: branchId
          in: query
          description: Filter shifts by branch id
          required: true
          schema:
            type: integer
            format: int32
        - name: client
          in: query
          description: Client name
          required: true
          schema:
            type: string
      responses:
        "200":
          description: List of all seating areas
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetAllSeatingAreasResponse"
        default:
          $ref: "#/components/responses/GeneralError"

  /widget/branches:
    get:
      summary: Get all branches
      description: Get all branches
      operationId: getWidgetAllBranches
      parameters:
        - name: client
          in: query
          description: Client name
          required: true
          schema:
            type: string
      responses:
        "200":
          description: List of all branches
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetAllBranchesResponse"

  /widget/reservations:
    post:
      summary: Create a new reservation
      description: Create a new reservation
      operationId: createWidgetReservation
      parameters:
        - name: client
          in: query
          description: Client name
          required: true
          schema:
            type: string
      requestBody:
        description: Reservation data
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateWidgetReservationRequest"
      responses:
        "201":
          description: Reservation created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateWidgetReservationResponse"
        default:
          $ref: "#/components/responses/GeneralError"

  /widget/special-occasions:
    get:
      summary: Get all special occasions
      description: Get all special occasions
      operationId: getWidgetAllSpecialOccasions
      parameters:
        - name: branchId
          in: query
          description: Branch id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Special occasions list
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetAllSpecialOccasionsResponse"
        default:
          $ref: "#/components/responses/GeneralError"

  /reports/overview:
    get:
      summary: Get overview report
      description: Get overview report
      operationId: getOverviewReport
      x-permissions: ["view-overview.reports"]
      parameters:
        - name: fromDate
          in: query
          description: From date
          required: false
          schema:
            type: string
        - name: toDate
          in: query
          description: To date
          required: false
          schema:
            type: string
        - name: period
          in: query
          description: Time period
          required: false
          schema:
            type: string
        - name: profileTagIds
          in: query
          description: Profile tag ids
          required: false
          schema:
            type: string
        - name: reservationTagIds
          in: query
          description: Reservation tag ids
          required: false
          schema:
            type: string
        - name: bookedVia
          in: query
          description: Booked via
          required: false
          schema:
            type: string
        - name: branchIds
          in: query
          description: Branch ids
          required: false
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Report response data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetOverviewReportResponse"
        default:
          $ref: "#/components/responses/GeneralError"

  /reports/overview/reservations:
    get:
      summary: Get reservation summary report
      description: Get reservation summary report
      operationId: getOverviewReservationsReport
      x-permissions: ["view-overview.reports"]
      parameters:
        - name: fromDate
          in: query
          description: From date
          required: false
          schema:
            type: string
        - name: toDate
          in: query
          description: To date
          required: false
          schema:
            type: string
        - name: period
          in: query
          description: Time period
          required: false
          schema:
            type: string
        - name: profileTagIds
          in: query
          description: Profile tag ids
          required: false
          schema:
            type: string
        - name: reservationTagIds
          in: query
          description: Reservation tag ids
          required: false
          schema:
            type: string
        - name: bookedVia
          in: query
          description: Booked via
          required: false
          schema:
            type: string
        - name: branchIds
          in: query
          description: Branch ids
          required: false
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Report response data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetOverviewReservationsReportResponse"
        default:
          $ref: "#/components/responses/GeneralError"

  /reports/financial:
    get:
      summary: Get financial report
      description: Get financial report
      operationId: getFinancialReport
      x-permissions: ["view-finance.reports"]
      parameters:
        - name: fromDate
          in: query
          description: From date
          required: false
          schema:
            type: string
        - name: toDate
          in: query
          description: To date
          required: false
          schema:
            type: string
        - name: period
          in: query
          description: Time period
          required: false
          schema:
            type: string
        - name: profileTagIds
          in: query
          description: Profile tag ids
          required: false
          schema:
            type: string
        - name: reservationTagIds
          in: query
          description: Reservation tag ids
          required: false
          schema:
            type: string
        - name: bookedVia
          in: query
          description: Booked via
          required: false
          schema:
            type: string
        - name: branchIds
          in: query
          description: Branch ids
          required: false
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Report response data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetFinancialReportResponse"
        default:
          $ref: "#/components/responses/GeneralError"

  /reports/financial/top-spenders:
    get:
      summary: Get top spenders report
      description: Get top spenders report
      operationId: getTopSpendersFinancialReport
      x-permissions: ["view-finance.reports"]
      parameters:
        - name: fromDate
          in: query
          description: From date
          required: false
          schema:
            type: string
        - name: toDate
          in: query
          description: To date
          required: false
          schema:
            type: string
        - name: period
          in: query
          description: Time period
          required: false
          schema:
            type: string
        - name: profileTagIds
          in: query
          description: Profile tag ids
          required: false
          schema:
            type: string
        - name: reservationTagIds
          in: query
          description: Reservation tag ids
          required: false
          schema:
            type: string
        - name: bookedVia
          in: query
          description: Booked via
          required: false
          schema:
            type: string
        - name: perPage
          in: query
          description: Number of results per page
          required: false
          schema:
            type: integer
            format: int32
        - name: currentPage
          in: query
          description: Page number
          required: false
          schema:
            type: integer
            format: int32
        - name: branchIds
          in: query
          description: Branch ids
          required: false
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Report response data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetFinancialTopSpendersReportResponse"
        default:
          $ref: "#/components/responses/GeneralError"

  /reports/guests:
    get:
      summary: Get guest report
      description: Get guest report
      operationId: getGuestReport
      x-permissions: ["view-guest.reports"]
      parameters:
        - name: fromDate
          in: query
          description: From date
          required: false
          schema:
            type: string
        - name: toDate
          in: query
          description: To date
          required: false
          schema:
            type: string
        - name: period
          in: query
          description: Time period
          required: false
          schema:
            type: string
        - name: profileTagIds
          in: query
          description: Profile tag ids
          required: false
          schema:
            type: string
        - name: reservationTagIds
          in: query
          description: Reservation tag ids
          required: false
          schema:
            type: string
        - name: bookedVia
          in: query
          description: Booked via
          required: false
          schema:
            type: string
        - name: branchIds
          in: query
          description: Branch ids
          required: false
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Report response data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetGuestReportResponse"
        default:
          $ref: "#/components/responses/GeneralError"

  /reports/guests/overview:
    get:
      summary: Get guest overview report
      description: Get guest overview report
      operationId: getGuestOverviewReport
      x-permissions: ["view-guest.reports"]
      parameters:
        - name: fromDate
          in: query
          description: From date
          required: false
          schema:
            type: string
        - name: toDate
          in: query
          description: To date
          required: false
          schema:
            type: string
        - name: period
          in: query
          description: Time period
          required: false
          schema:
            type: string
        - name: profileTagIds
          in: query
          description: Profile tag ids
          required: false
          schema:
            type: string
        - name: reservationTagIds
          in: query
          description: Reservation tag ids
          required: false
          schema:
            type: string
        - name: bookedVia
          in: query
          description: Booked via
          required: false
          schema:
            type: string
        - name: branchIds
          in: query
          description: Branch ids
          required: false
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Report response data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetOverviewGuestReportResponse"
        default:
          $ref: "#/components/responses/GeneralError"

  /reports/customize:
    get:
      summary: Get customize report
      description: Get customize report
      operationId: getCustomizeReport
      x-permissions: ["view-customize.reports"]
      parameters:
        - name: fromDate
          in: query
          description: From date
          required: false
          schema:
            type: string
        - name: toDate
          in: query
          description: To date
          required: false
          schema:
            type: string
        - name: fromTime
          in: query
          description: From time
          required: false
          schema:
            type: string
        - name: toTime
          in: query
          description: To time
          required: false
          schema:
            type: string
        - name: branchIds
          in: query
          description: Branch ids
          required: false
          schema:
            type: string
        - name: tagIds
          in: query
          description: Reservation tag ids
          required: false
          schema:
            type: string
        - name: shiftIds
          in: query
          description: Shift ids
          required: false
          schema:
            type: string
        - name: seatingAreaIds
          in: query
          description: Seating area ids
          required: false
          schema:
            type: string
        - name: reservationStatuses
          in: query
          description: Reservation status ids
          required: false
          schema:
            type: string
        - name: bookedVia
          in: query
          description: Booked via
          required: false
          schema:
            type: string
        - name: minSpent
          in: query
          description: Min spent
          required: false
          schema:
            type: integer
            format: int32
        - name: maxSpent
          in: query
          description: Max spent
          required: false
          schema:
            type: integer
            format: int32
        - name: perPage
          in: query
          description: Number of results per page
          required: false
          schema:
            type: integer
            format: int32
        - name: currentPage
          in: query
          description: Page number
          required: false
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Report response data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetCustomizeReportResponse"
        default:
          $ref: "#/components/responses/GeneralError"

  /reports/customize/download:
    post:
      summary: Download customize report
      description: Download customize report
      operationId: downloadCustomizeReport
      x-permissions: ["download-report.reports"]
      requestBody:
        description: Query data
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DownloadCustomizeReportRequest"
      responses:
        "200":
          description: Report response data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DownloadCustomizeReportResponse"
        default:
          $ref: "#/components/responses/GeneralError"

  /reservations/booked-via:
    get:
      summary: Get all booked via
      description: Get all booked via
      operationId: getAllBookedVia
      responses:
        "200":
          description: All booked via
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetAllBookedViaResponse"

  /restaurant-items:
    get:
      summary: Get all restaurant items
      description: Get all restaurant items
      operationId: getAllRestaurantItems
      parameters:
        - name: perPage
          in: query
          description: Number of results per page
          required: false
          schema:
            type: integer
            format: int32
        - name: currentPage
          in: query
          description: Page number
          required: false
          schema:
            type: integer
            format: int32
        - name: Query search
          in: query
          required: false
          schema:
            type: string
        - name: sort
          in: query
          description: Items sort criteria
          required: false
          schema:
            type: string
      responses:
        "200":
          description: All items
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetAllRestaurantItemsResponse"
    post:
      summary: Create restaurant item
      description: Create a new restaurant item
      operationId: createRestaurantItem
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateRestaurantItemRequest"
      responses:
        "200":
          description: Item
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateRestaurantItemResponse"
        default:
          $ref: "#/components/responses/GeneralError"

  /restaurant-items/{itemId}:
    get:
      summary: Get restaurant item
      description: Get restaurant item
      operationId: getRestaurantItemByID
      parameters:
        - name: itemId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Item
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetRestaurantItemByIDResponse"
        default:
          $ref: "#/components/responses/GeneralError"
    put:
      summary: Update restaurant item
      description: Update restaurant item
      operationId: updateRestaurantItem
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateRestaurantItemRequest"
      responses:
        "200":
          description: Item
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateRestaurantItemResponse"
        default:
          $ref: "#/components/responses/GeneralError"
    delete:
      summary: Delete restaurant item
      description: Delete restaurant item
      operationId: deleteRestaurantItem
      parameters:
        - name: itemId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Item
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteRestaurantItemResponse"
        default:
          $ref: "#/components/responses/GeneralError"

  /payment/{reservationId}/request:
    get:
      summary: Get all reservation payments
      description: Get all reservation payments
      operationId: getAllReservationPayments
      parameters:
        - name: reservationId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: All payments for specified reservation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetAllReservationPaymentsResponse"
        default:
          $ref: "#/components/responses/GeneralError"
    post:
      summary: Send payment request
      description: Send payment request
      operationId: sendPaymentRequest
      parameters:
        - name: reservationId
          in: path
          required: true
          schema:
            type: integre
            format: int32
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PaymentRequest"
      responses:
        "200":
          description: Payment response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaymentResponse"
        default:
          $ref: "#/components/responses/GeneralError"

  /payment/{reservationId}/request/{paymentId}:
    get:
      summary: Get payment by id
      description: Get payment by id
      operationId: getPaymentByID
      parameters:
        - name: reservationId
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - name: paymentId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Payment response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaymentResponse"

  /webhooks/payment/{clientId}:
    post:
      summary: Update payment from webhook
      description: Update payment from webhook
      operationId: updatePaymentFromWebhook
      parameters:
        - name: clientId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdatePaymentFromWebhookRequest"
      responses:
        "200":
          description: Payment response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdatePaymentFromWebhookResponse"
        default:
          $ref: "#/components/responses/GeneralError"

  /reservations/{reservationId}/visitors:
    post:
      summary: Add visitors to reservation
      description: Add visitors to reservation
      operationId: addReservationVisitors
      parameters:
        - name: reservationId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddReservationVisitorsRequest"
      responses:
        "201":
          description: Visitors added
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AddReservationVisitorsResponse"
        default:
          $ref: "#/components/responses/GeneralError"

    delete:
      summary: Delete reservation visitors
      description: Delete reservation visitors
      operationId: deleteReservationVisitors
      parameters:
        - name: reservationId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeleteReservationVisitorsRequest"
      responses:
        "200":
          description: Visitors deleted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteReservationVisitorsResponse"
        default:
          $ref: "#/components/responses/GeneralError"

  /payment/{invoiceId}:
    delete:
      summary: Cancel payment
      description: Cancel payment
      operationId: cancelPayment
      parameters:
        - name: invoiceId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Payment response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CancelPaymentResponse"
        default:
          $ref: "#/components/responses/GeneralError"

components:
  responses:
    GeneralError:
      description: Unexpected error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/GeneralError"
  schemas:
    ValidationErrors:
      allOf:
        - $ref: "#/components/schemas/GeneralError"
        - type: object
          properties:
            validationErrors:
              type: array
              items:
                $ref: "#/components/schemas/ValidationError"
    ValidationError:
      type: object
      properties:
        fieldName:
          type: string
        description:
          type: string
          description: optional human readable description of the error
    GeneralError:
      properties:
        code:
          format: int32
          type: integer
        message:
          type: string
      required:
        - code
        - message

    # Login
    LoginRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          x-extra-tags:
            validate: "required,email"
        password:
          type: string
          x-extra-tags:
            validate: "required,password"
        clientID:
          type: string
        clientSecret:
          type: string
      required:
        - email
        - password
    LoginResponse:
      type: object
      properties:
        accessToken:
          type: string
          description: JWT access token
        expiresAt:
          type: string
          description: Access token expiration date
        setup:
          type: boolean
          description: Return as true if the user has not completed the setup process and should be redirected to the setup page
          nullable: true
      required:
        - accessToken
        - expiresAt

    # PinCode
    PinCodeRequest:
      type: object
      properties:
        pinCode:
          type: string
          x-extra-tags:
            validate: "required"
      required:
        - pinCode
    PinCodeResponse:
      type: object
      properties:
        status:
          type: string
          description: Operation status
        message:
          type: string
          description: resulting message
      required:
        - status
        - message

    # DemoRequest
    DemoRequest:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        email:
          type: string
          format: email
          x-extra-tags:
            validate: "required,email"
        phoneNumber:
          type: string
        country:
          type: string
        restaurantName:
          type: string
        branchesNo:
          type: number
          format: int32
        firstTimeCrm:
          type: boolean
        systemName:
          type: string
      required:
        - name
        - email
        - phoneNumber
        - restaurantName
        - branchesNo
    DemoResponse:
      type: object
      properties:
        result:
          type: string
          description: Result message
      required:
        - message

    GetAuthenticatedUserResponse:
      type: object
      properties:
        data:
          $ref: "#/components/schemas/AuthenticatedUser"

    AuthenticatedUser:
      type: object
      properties:
        id:
          type: integer
          format: int32
        employeeId:
          type: string
        birthDate:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
        phoneNumber:
          type: string
        gender:
          type: string
        role:
          $ref: "#/components/schemas/Role"
        department:
          $ref: "#/components/schemas/Department"
        branch:
          $ref: "#/components/schemas/ReservationBranch"
        groupId:
          type: string
        timezone:
          type: string
        avatar:
          type: string
      required:
        - id
        - firstName
        - lastName
        - email
        - phoneNumber
        - role
        - department
        - timezone
        - avatar
        - branch
        - gender
        - groupId

    # Pagination
    Pagination:
      type: object
      properties:
        total:
          type: integer
          format: int32
        perPage:
          type: integer
          format: int32
        currentPage:
          type: integer
          format: int32
        lastPage:
          type: integer
          format: int32
        from:
          type: integer
          format: int32
        to:
          type: integer
          format: int32
      required:
        - total
        - perPage
        - currentPage
        - lastPage
        - from
        - to

    # Guest
    Guest:
      type: object
      properties:
        id:
          type: integer
          format: int32
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
          x-extra-tags:
            validate: "email"
        phoneNumber:
          type: string
        language:
          type: string
        birthDate:
          type: string
        lastVisit:
          type: string
        totalVisits:
          type: integer
          format: int32
        currentMood:
          type: string
        totalSpent:
          type: number
          format: float32
        totalNoShow:
          type: integer
          format: int32
        totalCancel:
          type: integer
          format: int32
        upcomingReservation:
          type: string
        branches:
          type: array
          items:
            $ref: "#/components/schemas/GuestBranchVisits"
        tags:
          type: array
          items:
            $ref: "#/components/schemas/Tag"
        notes:
          type: array
          items:
            $ref: "#/components/schemas/GuestNote"
        address:
          type: string
        gender:
          type: string
        createdAt:
          type: string
        updatedAt:
          type: string
      required:
        - firstName
        - lastName
        - email
        - phoneNumber
        - language
        - birthDate
        - lastVisit
        - totalVisits
        - currentMood
        - totalSpent
        - totalNoShow
        - totalCancel
        - upcomingReservation
        - branches
        - tags
        - notes
        - address

    GuestShort:
      type: object
      properties:
        id:
          type: integer
          format: int32
        firstName:
          type: string
        lastName:
          type: string
        phoneNumber:
          type: string

    GuestParams:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
          x-extra-tags:
            validate: "email"
          nullable: true
        phoneNumber:
          type: string
        language:
          type: string
          nullable: true
        birthDate:
          type: string
          nullable: true
        tags:
          type: array
          items:
            $ref: "#/components/schemas/TagParams"
        address:
          type: string
        gender:
          type: string
      required:
        - phoneNumber
        - firstName
        - lastName

    TagParams:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
        categoryId:
          type: integer
          format: int32

    ReservationWaitlistNote:
      type: object
      properties:
        id:
          type: integer
          format: int32
        reservationWaitlistId:
          type: integer
          format: int32
        description:
          type: string
        creator:
          nullable: true
          $ref: "#/components/schemas/User"
        createdAt:
          type: string
        updatedAt:
          type: string

    GuestNote:
      type: object
      properties:
        id:
          type: integer
          format: int32
        guestId:
          type: integer
          format: int32
        description:
          type: string
        creator:
          $ref: "#/components/schemas/User"
        createdAt:
          type: string
        updatedAt:
          type: string

    GuestNoteParams:
      type: object
      properties:
        description:
          type: string

    GuestBranchVisits:
      type: object
      properties:
        branchName:
          type: string
        visits:
          type: integer
          format: int32
      required:
        - branchName
        - visits

    GetAllGuestsResponse:
      type: object
      properties:
        pagination:
          $ref: "#/components/schemas/Pagination"
        result:
          type: array
          items:
            $ref: "#/components/schemas/Guest"
      required:
        - pagination
        - result

    GetGuestByIDResponse:
      type: object
      properties:
        data:
          $ref: "#/components/schemas/Guest"
      required:
        - data

    ImportGuestsFromExcelRequest:
      type: object
      properties:
        file:
          type: string
          format: binary
      required:
        - file
    ImportGuestsFromExcelResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
          description: Result code
        message:
          type: string
          description: Result message
      required:
        - code
        - message

    CreateGuestRequest:
      $ref: "#/components/schemas/GuestParams"
    CreateGuestResponse:
      type: object
      properties:
        data:
          $ref: "#/components/schemas/Guest"
      required:
        - data

    UpdateGuestRequest:
      $ref: "#/components/schemas/GuestParams"
    UpdateGuestResponse:
      type: object
      properties:
        result:
          $ref: "#/components/schemas/Guest"
      required:
        - result

    GetAllGuestFeedbacksResponse:
      type: array
      properties:
        items:
          $ref: "#/components/schemas/ReservationFeedback"
      required:
        - items

    # Staff
    Staff:
      type: object
      properties:
        id:
          type: integer
          format: int32
        castId:
          type: integer
          format: int32
        name:
          type: string
        role:
          type: string
        phoneNumber:
          type: string
        createdAt:
          type: string
        updatedAt:
          type: string
      required:
        - name
        - role
        - phoneNumber

    # Cast
    Cast:
      type: object
      properties:
        id:
          type: integer
          format: int32
        staff:
          type: array
          items:
            $ref: "#/components/schemas/Staff"
        createdAt:
          type: string
        updatedAt:
          type: string

    # Branch
    Branch:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
        country:
          type: string
        city:
          type: string
        address:
          type: string
        gmapsLink:
          type: string
        email:
          type: string
        phoneNumber:
          type: string
        website:
          type: string
      required:
        - name
        - country
        - city
        - address
        - gmapsLink
        - email
        - phoneNumber
        - website

    # Table
    Table:
      type: object
      properties:
        id:
          type: integer
          format: int32
        seatingAreaId:
          type: integer
          format: int32
        seatingArea:
          $ref: "#/components/schemas/SeatingArea"
        tableNumber:
          type: string
        posNumber:
          type: integer
          format: int32
        minPartySize:
          type: integer
          format: int32
        maxPartySize:
          type: integer
          format: int32
        combinedTables:
          type: array
          items:
            type: integer
            format: int32
        restrictions:
          type: array
          items:
            $ref: "#/components/schemas/TableRestriction"
        createdAt:
          type: string
        updatedAt:
          type: string
      required:
        - tableNumber
        - posNumber
        - minPartySize
        - maxPartySize

    TableParams:
      type: object
      properties:
        seatingAreaId:
          type: integer
          format: int32
        tableNumber:
          type: string
        posNumber:
          type: integer
          format: int32
        minPartySize:
          type: integer
          format: int32
        maxPartySize:
          type: integer
          format: int32
        combinedTables:
          type: array
          items:
            type: integer
            format: int32
      required:
        - tableNumber
        - posNumber
        - minPartySize
        - maxPartySize

    ReservationGuest:
      type: object
      properties:
        id:
          type: integer
          format: int32
        firstName:
          type: string
        lastName:
          type: string
        phoneNumber:
          type: string
        totalVisits:
          type: integer
          format: int32
        totalSpent:
          type: number
        totalNoShow:
          type: integer
          format: int32
        totalCancel:
          type: integer
          format: int32
        isPrimary:
          type: boolean
        note:
          nullable: true
          $ref: "#/components/schemas/GuestNote"
        gender:
          type: string
        tags:
          type: array
          items:
            $ref: "#/components/schemas/Tag"
      required:
        - totalVisits
        - totalSpent
        - totalNoShow
        - totalCancel
        - tags

    ReservationBranch:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
        currency:
          type: string
      required:
        - currency

    ReservationShift:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
        cast:
          $ref: "#/components/schemas/Cast"

    ReservationPayment:
      type: object
      properties:
        status:
          type: string
        totalPaid:
          type: integer
          format: int32
        totalUnPaid:
          type: integer
          format: int32
      required:
        - totalPaid
        - totalUnPaid

    # Reservation
    Reservation:
      type: object
      properties:
        id:
          type: integer
          format: int32
        reservationRef:
          type: string
        guests:
          type: array
          items:
            $ref: "#/components/schemas/ReservationGuest"
        branch:
          $ref: "#/components/schemas/ReservationBranch"
        shift:
          $ref: "#/components/schemas/ReservationShift"
        tables:
          type: array
          items:
            $ref: "#/components/schemas/Table"
        guestsNumber:
          type: integer
          format: int32
        seatedGuests:
          type: integer
          format: int32
        date:
          type: string
        time:
          type: string
        reservedVia:
          type: string
        checkIn:
          type: string
        status:
          $ref: "#/components/schemas/ReservationStatus"
        specialOccasion:
          $ref: "#/components/schemas/SpecialOccasion"
          nullable: true
        tags:
          type: array
          items:
            $ref: "#/components/schemas/Tag"
        note:
          $ref: "#/components/schemas/ReservationNote"
        feedback:
          $ref: "#/components/schemas/ReservationFeedbackShort"
          nullable: true
        checkOut:
          type: string
        creator:
          $ref: "#/components/schemas/User"
          nullable: true
        totalSpent:
          type: number
          format: double
        payment:
          $ref: "#/components/schemas/ReservationPayment"
        createdAt:
          type: string
        updatedAt:
          type: string
      required:
        - guest
        - branch
        - shift
        - tables
        - status
        - tags
        - checkIn
        - checkOut
        - feedback
        - totalSpent
        - payStatus

    ReservationShort:
      type: object
      properties:
        id:
          type: integer
          format: int32
        branch:
          $ref: "#/components/schemas/CBranch"
        guestsNumber:
          type: integer
          format: int32
        seatedGuests:
          type: integer
          format: int32
        date:
          type: string
        time:
          type: string
        reservedVia:
          type: string
        specialOccasion:
          $ref: "#/components/schemas/SpecialOccasion"
          nullable: true
        checkIn:
          type: string
        status:
          $ref: "#/components/schemas/ReservationStatus"
        checkOut:
          type: string
        tables:
          type: array
          items:
            $ref: "#/components/schemas/Table"
        createdAt:
          type: string
        updatedAt:
          type: string
      required:
        - status
        - checkIn
        - checkOut
        - tables

    ReservationParams:
      type: object
      properties:
        id:
          type: integer
          format: int32
        guestId:
          type: integer
          format: int32
        seatingAreaId:
          type: integer
          format: int32
        branchId:
          type: integer
          format: int32
        shiftId:
          type: integer
          format: int32
        guestsNumber:
          type: integer
          format: int32
        seatedGuests:
          type: integer
          format: int32
        date:
          type: string
        time:
          type: string
        creationDuration:
          type: number
          format: float32
        reservedVia:
          type: string
        statusId:
          type: integer
          format: int32
        specialOccasionId:
          type: integer
          format: int32
          nullable: true
        tags:
          type: array
          items:
            $ref: "#/components/schemas/TagParams"
      required:
        - guestId
        - branchId
        - seatingAreaId
        - shiftId
        - guestsNumber
        - date
        - time
        - reservedVia

    ReservationOrder:
      type: object
      properties:
        id:
          type: integer
          format: int32
        items:
          type: array
          items:
            $ref: "#/components/schemas/ReservationOrderItem"
        discountAmount:
          type: number
          format: float32
        discountReason:
          type: string
        prevailingTax:
          type: number
          format: float32
        tax:
          type: number
          format: float32
        subTotal:
          type: number
          format: float32
        finalTotal:
          type: number
          format: float32
        createdAt:
          type: string
        updatedAt:
          type: string
      required:
        - id
        - items
        - discountAmount
        - discountReason
        - prevailingTax
        - tax
        - subTotal
        - finalTotal

    ReservationOrderItem:
      type: object
      properties:
        id:
          type: integer
          format: int32
        itemName:
          type: string
        cost:
          type: number
          format: float32
        quantity:
          type: integer
          format: int32
        createdAt:
          type: string
        updatedAt:
          type: string
      required:
        - itemName
        - cost
        - quantity

    GetAllReservationsResponse:
      type: object
      properties:
        pagination:
          $ref: "#/components/schemas/Pagination"
        result:
          type: array
          items:
            $ref: "#/components/schemas/Reservation"
      required:
        - pagination
        - result

    CreateReservationRequest:
      $ref: "#/components/schemas/ReservationParams"

    CreateReservationResponse:
      type: object
      properties:
        result:
          $ref: "#/components/schemas/Reservation"
      required:
        - result

    GetReservationByIDResponse:
      type: object
      properties:
        result:
          $ref: "#/components/schemas/Reservation"
      required:
        - result

    UpdateReservationRequest:
      $ref: "#/components/schemas/ReservationParams"

    UpdateReservationResponse:
      type: object
      properties:
        result:
          $ref: "#/components/schemas/Reservation"
      required:
        - result

    GetAvailableTimesResponse:
      type: array
      properties:
        items:
          $ref: "#/components/schemas/AvailableTime"

    AvailableTime:
      type: object
      properties:
        time:
          type: string
        pacing:
          type: integer
          format: int32
        capacity:
          type: integer
          format: int32
        available:
          type: boolean
      required:
        - time
        - pacing
        - capacity
        - available

    ReservationStatus:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
        color:
          type: string
        category:
          type: string
        type:
          type: string
        icon:
          type: string
        createdAt:
          type: string
        updatedAt:
          type: string
      required:
        - name
        - color
        - icon
        - category
        - type

    ReservationStatusParams:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
        category:
          type: string
        type:
          type: string
        color:
          type: string
        icon:
          type: string
      required:
        - name

    ReservationFeedback:
      type: object
      properties:
        id:
          type: integer
          format: int32
        status:
          type: string
        guest:
          $ref: "#/components/schemas/GuestShort"
        reservation:
          $ref: "#/components/schemas/ReservationShort"
        sections:
          type: array
          items:
            $ref: "#/components/schemas/FeedbackSection"
        solution:
          nullable: true
          $ref: "#/components/schemas/ReservationFeedbackSolution"
        rate:
          type: integer
          format: int32
          nullable: true
        description:
          type: string
          nullable: true
        createdAt:
          type: string
        updatedAt:
          type: string
      required:
        - rate
        - description
        - sections

    ReservationFeedbackShort:
      type: object
      properties:
        id:
          type: integer
          format: int32
        rate:
          type: integer
          format: int32
        description:
          type: string
          nullable: true
        createdAt:
          type: string

    ReservationFeedbackParams:
      type: object
      properties:
        reservationId:
          type: integer
          format: int32
        status:
          type: integer
          format: int32
        sectionIds:
          nullable: true
          type: array
          items:
            type: integer
            format: int32
        rate:
          type: integer
          format: int32
        description:
          type: string

    SpecialOccasion:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
        color:
          type: string
        icon:
          type: string
        createdAt:
          type: string
        updatedAt:
          type: string

    ReservationNote:
      type: object
      properties:
        id:
          type: integer
          format: int32
        description:
          type: string
        creator:
          $ref: "#/components/schemas/User"
          nullable: true
        createdAt:
          type: string
        updatedAt:
          type: string

    ReservationNoteParams:
      type: object
      properties:
        description:
          type: string

    Shift:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
        from:
          type: string
        to:
          type: string
        startDate:
          type: string
        endDate:
          type: string
        timeInterval:
          type: integer
          format: int32
        floorPlan:
          $ref: "#/components/schemas/ShortFloorPlan"
        seatingAreas:
          type: array
          items:
            $ref: "#/components/schemas/SeatingArea"
        category:
          $ref: "#/components/schemas/ShiftCategory"
        minGuests:
          type: integer
          format: int32
        maxGuests:
          type: integer
          format: int32
        daysToRepeat:
          type: array
          items:
            type: string
        turnover:
          type: array
          items:
            $ref: "#/components/schemas/Turnover"
        pacing:
          type: array
          items:
            $ref: "#/components/schemas/Pacing"
        exceptions:
          type: array
          items:
            type: string
        createdAt:
          type: string
        updatedAt:
          type: string
      required:
        - name
        - from
        - to
        - startDate
        - endDate
        - timeInterval
        - floorPlan
        - seatingArea
        - category
        - minGuests
        - maxGuests
        - daysToRepeat
        - seatingAreas
        - turnover
        - exceptions
        - pacing

    ShiftParams:
      type: object
      properties:
        id:
          type: integer
          format: int32
        branchId:
          type: integer
          format: int32
        name:
          type: string
        from:
          type: string
        to:
          type: string
        startDate:
          type: string
        endDate:
          type: string
        timeInterval:
          type: integer
          format: int32
        floorPlanId:
          type: integer
          format: int32
        seatingAreaIds:
          type: array
          items:
            type: integer
            format: int32
        categoryId:
          type: integer
          format: int32
        minGuests:
          type: integer
          format: int32
        maxGuests:
          type: integer
          format: int32
        daysToRepeat:
          type: array
          items:
            type: string
        turnover:
          type: array
          items:
            $ref: "#/components/schemas/TurnoverParams"
        pacing:
          type: array
          items:
            $ref: "#/components/schemas/PacingParams"

    Pacing:
      type: object
      properties:
        id:
          type: integer
          format: int32
        shiftId:
          type: integer
          format: int32
        seatingAreaId:
          type: integer
          format: int32
        hour:
          type: string
        capacity:
          type: integer
          format: int32
        createdAt:
          type: string
        updatedAt:
          type: string
      required:
        - shiftId
        - seatingAreaId
        - hour
        - capacity

    PacingParams:
      type: object
      properties:
        seatingAreaId:
          type: integer
          format: int32
        hour:
          type: string
        capacity:
          type: integer
          format: int32

    ShiftCategory:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
        color:
          type: string
        createdAt:
          type: string
        updatedAt:
          type: string

    ShiftCategoryParams:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
        color:
          type: string

    ElementProperty:
      type: object
      properties:
        shape:
          type: string
        width:
          type: number
          format: float32
        height:
          type: number
          format: float32
        angle:
          type: integer
          format: int32
        x:
          type: number
          format: float32
        y:
          type: number
          format: float32
      required:
        - shape
        - width
        - height
        - angle
        - x
        - y

    FloorPlanElement:
      type: object
      properties:
        id:
          type: integer
          format: int32
        elementType:
          type: string
        tableId:
          type: integer
          format: int32
        table:
          $ref: "#/components/schemas/Table"
          nullable: true
        property:
          $ref: "#/components/schemas/ElementProperty"
        createdAt:
          type: string
        updatedAt:
          type: string
      required:
        - elementType
        - properties

    FloorPlanElementParams:
      type: object
      properties:
        id:
          type: integer
          format: int32
        elementType:
          type: string
        tableId:
          type: integer
          format: int32
        table:
          $ref: "#/components/schemas/Table"
          nullable: true
        property:
          $ref: "#/components/schemas/ElementProperty"

    FloorPlan:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
        layouts:
          type: array
          items:
            $ref: "#/components/schemas/FloorPlanLayout"
        createdAt:
          type: string
        updatedAt:
          type: string
      required:
        - name
        - layouts

    ShortFloorPlan:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
      required:
        - name

    FloorPlanParams:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
        seatingAreaId:
          type: integer
          format: int32
        scale:
          type: number
          format: float32
        elements:
          type: array
          items:
            $ref: "#/components/schemas/FloorPlanElementParams"
      required:
        - name

    FloorPlanLayoutParams:
      type: object
      properties:
        seatingAreaId:
          type: integer
          format: int32
        scale:
          type: number
          format: float32
        elements:
          type: array
          items:
            $ref: "#/components/schemas/FloorPlanElementParams"

    FloorPlanLayout:
      type: object
      properties:
        seatingArea:
          $ref: "#/components/schemas/SeatingArea"
        scale:
          type: number
          format: float32
        elements:
          type: array
          items:
            $ref: "#/components/schemas/FloorPlanElement"
      required:
        - seatingArea
        - scale
        - elements

    Turnover:
      type: object
      properties:
        id:
          type: integer
          format: int32
        shiftId:
          type: integer
          format: int32
        guestsNumber:
          type: integer
          format: int32
        turnoverTime:
          type: string
        createdAt:
          type: string
        updatedAt:
          type: string

    TurnoverParams:
      type: object
      properties:
        id:
          type: integer
          format: int32
        shiftId:
          type: integer
          format: int32
        guestsNumber:
          type: integer
          format: int32
        turnoverTime:
          type: string

    SeatingArea:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
        branchId:
          type: integer
          format: int32
        createdAt:
          type: string
        updatedAt:
          type: string
      required:
        - name

    SeatingAreaParams:
      type: object
      properties:
        name:
          type: string
      required:
        - name

    GetAllReservationTagsResponse:
      type: object
      properties:
        result:
          type: array
          items:
            $ref: "#/components/schemas/Tag"

    GetAllReservationTagCategoriesResponse:
      type: object
      properties:
        result:
          type: array
          items:
            $ref: "#/components/schemas/TagCategory"

    CreateReservationCategoryTagRequest:
      $ref: "#/components/schemas/TagParams"

    CreateReservationCategoryTagResponse:
      $ref: "#/components/schemas/Tag"

    CreateReservationTagCategoryRequest:
      $ref: "#/components/schemas/TagCategoryParams"

    CreateReservationTagCategoryResponse:
      $ref: "#/components/schemas/TagCategory"

    UpdateReservationTagCategoryRequest:
      $ref: "#/components/schemas/TagCategoryParams"

    UpdateReservationTagCategoryResponse:
      $ref: "#/components/schemas/TagCategory"

    GetReservationCategoryTagByIDResponse:
      $ref: "#/components/schemas/Tag"

    GetReservationTagCategoryByIDResponse:
      $ref: "#/components/schemas/TagCategory"

    # Guest & Reservation Tag
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int32
        category:
          $ref: "#/components/schemas/TagCategory"
          nullable: true
        name:
          type: string
        createdAt:
          type: string
        updatedAt:
          type: string

    # Guest & Reservation Tag Category
    TagCategory:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
        color:
          type: string
        classification:
          type: string
        orderIndex:
          type: integer
          format: int32
        tags:
          type: array
          items:
            $ref: "#/components/schemas/Tag"
        isDisabled:
          type: boolean
          default: false
        createdAt:
          type: string
        updatedAt:
          type: string
      required:
        - isDisabled

    TagCategoryParams:
      type: object
      properties:
        name:
          type: string
        color:
          type: string
        classification:
          type: string
        orderIndex:
          type: integer
          format: int32
        isDisabled:
          type: boolean
          default: false
      required:
        - name
        - color
        - classification
        - orderIndex
        - isDisabled

    GetAllGuestTagsResponse:
      type: object
      properties:
        result:
          type: array
          items:
            $ref: "#/components/schemas/Tag"

    GetAllGuestTagCategoriesResponse:
      type: object
      properties:
        result:
          type: array
          items:
            $ref: "#/components/schemas/TagCategory"

    CreateGuestCategoryTagRequest:
      $ref: "#/components/schemas/TagParams"

    CreateGuestCategoryTagResponse:
      $ref: "#/components/schemas/Tag"

    CreateGuestTagCategoryRequest:
      $ref: "#/components/schemas/TagCategoryParams"

    CreateGuestTagCategoryResponse:
      $ref: "#/components/schemas/TagCategory"

    UpdateGuestTagCategoryRequest:
      $ref: "#/components/schemas/TagCategoryParams"

    UpdateGuestTagCategoryResponse:
      $ref: "#/components/schemas/TagCategory"

    GetGuestCategoryTagByIDResponse:
      $ref: "#/components/schemas/Tag"

    GetGuestTagCategoryByIDResponse:
      $ref: "#/components/schemas/TagCategory"

    # Reservation Status
    CreateReservationStatusRequest:
      $ref: "#/components/schemas/ReservationStatusParams"

    CreateReservationStatusResponse:
      $ref: "#/components/schemas/ReservationStatus"

    BranchReservationStatus:
      type: object
      properties:
        branch:
          type: string
        statuses:
          type: array
          items:
            $ref: "#/components/schemas/ReservationStatus"

    GetAllReservationStatusesResponse:
      type: array
      items:
        $ref: "#/components/schemas/BranchReservationStatus"

    GetReservationStatusByIDRequest:
      $ref: "#/components/schemas/ReservationStatusParams"

    GetReservationStatusByIDResponse:
      $ref: "#/components/schemas/ReservationStatus"

    UpdateReservationStatusRequest:
      $ref: "#/components/schemas/ReservationStatusParams"

    UpdateReservationStatusResponse:
      $ref: "#/components/schemas/ReservationStatus"

    GetGuestUpcomingReservationResponse:
      type: array
      items:
        $ref: "#/components/schemas/Reservation"

    # Logs
    GuestLog:
      type: object
      properties:
        id:
          type: integer
          format: int32
        guestId:
          type: integer
          format: int32
        creator:
          $ref: "#/components/schemas/User"
          nullable: true
        madeBy:
          type: string
        fieldName:
          type: string
        oldValue:
          type: string
        newValue:
          type: string
        action:
          type: string
        createdAt:
          type: string
        updatedAt:
          type: string

    GuestLogParams:
      type: object
      properties:
        guestId:
          type: integer
          format: int32
        fieldName:
          type: string
        oldValue:
          type: string
        newValue:
          type: string
        action:
          type: string

    ReservationLog:
      type: object
      properties:
        id:
          type: integer
          format: int32
        reservationId:
          type: integer
          format: int32
        creator:
          $ref: "#/components/schemas/User"
          nullable: true
        madeBy:
          type: string
        fieldName:
          type: string
        oldValue:
          type: string
        newValue:
          type: string
        action:
          type: string
        createdAt:
          type: string
        updatedAt:
          type: string

    ReservationWaitlistLog:
      type: object
      properties:
        id:
          type: integer
          format: int32
        reservationWaitlistId:
          type: integer
          format: int32
        creator:
          $ref: "#/components/schemas/User"
          nullable: true
        madeBy:
          type: string
        fieldName:
          type: string
        oldValue:
          type: string
        newValue:
          type: string
        action:
          type: string
        createdAt:
          type: string
        updatedAt:
          type: string

    ReservationLogParams:
      type: object
      properties:
        reservationId:
          type: integer
          format: int32
        fieldName:
          type: string
        oldValue:
          type: string
        newValue:
          type: string
        action:
          type: string

    GetAllGuestLogsResponse:
      type: array
      properties:
        items:
          $ref: "#/components/schemas/GuestLog"
      required:
        - result

    GetAllReservationLogsResponse:
      type: array
      properties:
        items:
          $ref: "#/components/schemas/ReservationLog"
      required:
        - result

    GetAllReservationWaitlistLogsResponse:
      type: array
      properties:
        items:
          $ref: "#/components/schemas/ReservationWaitlistLog"
      required:
        - result

    GetAllBranchesResponse:
      type: array
      items:
        $ref: "#/components/schemas/Branch"

    GetAllShiftsResponse:
      type: object
      properties:
        pagination:
          $ref: "#/components/schemas/Pagination"
        result:
          type: array
          items:
            $ref: "#/components/schemas/Shift"
      required:
        - pagination
        - result

    CreateShiftRequest:
      $ref: "#/components/schemas/ShiftParams"

    CreateShiftResponse:
      $ref: "#/components/schemas/Shift"

    GetShiftByIDResponse:
      $ref: "#/components/schemas/Shift"

    UpdateShiftRequest:
      $ref: "#/components/schemas/ShiftParams"

    UpdateShiftResponse:
      $ref: "#/components/schemas/Shift"

    GetAllShiftCategoriesResponse:
      type: array
      items:
        $ref: "#/components/schemas/ShiftCategory"

    CreateShiftCategoryRequest:
      $ref: "#/components/schemas/ShiftCategoryParams"
    CreateShiftCategoryResponse:
      $ref: "#/components/schemas/ShiftCategory"

    GetAllSeatingAreasResponse:
      type: array
      items:
        $ref: "#/components/schemas/SeatingArea"

    CreateSeatingAreaRequest:
      $ref: "#/components/schemas/SeatingAreaParams"
    CreateSeatingAreaResponse:
      $ref: "#/components/schemas/SeatingArea"

    UpdateSeatingAreaRequest:
      $ref: "#/components/schemas/SeatingAreaParams"
    UpdateSeatingAreaResponse:
      $ref: "#/components/schemas/SeatingArea"

    DeleteSeatingAreaResponse:
      type: object
      properties:
        result:
          type: string
      required:
        - result

    GetAllFloorPlansResponse:
      type: array
      items:
        $ref: "#/components/schemas/FloorPlan"

    CreateTableRequest:
      $ref: "#/components/schemas/TableParams"

    CreateTableResponse:
      $ref: "#/components/schemas/Table"

    GetAllTablesResponse:
      type: array
      items:
        $ref: "#/components/schemas/Table"

    DeleteTableResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        result:
          type: string
      required:
        - result

    UpdateTableRequest:
      $ref: "#/components/schemas/TableParams"

    UpdateTableResponse:
      $ref: "#/components/schemas/Table"

    Country:
      type: object
      properties:
        id:
          type: integer
          format: int32
        countryName:
          type: string
        countryNameArabic:
          type: string
        continentName:
          type: string
        countryCode:
          type: string
        countryPhoneCode:
          type: string
        timeZone:
          type: string

    GetCountryByNameResponse:
      $ref: "#/components/schemas/Country"

    GetAllCountriesResponse:
      type: array
      items:
        $ref: "#/components/schemas/Country"

    UpdateReservationTableRequest:
      $ref: "#/components/schemas/TableIds"

    UpdateReservationTableResponse:
      $ref: "#/components/schemas/Reservation"

    ReservationWaitlist:
      type: object
      properties:
        id:
          type: integer
          format: int32
        guest:
          $ref: "#/components/schemas/Guest"
        seatingArea:
          $ref: "#/components/schemas/SeatingArea"
        guestsNumber:
          type: integer
          format: int32
        waitingTime:
          type: integer
          format: int32
        note:
          $ref: "#/components/schemas/ReservationWaitlistNote"
        tags:
          type: array
          items:
            $ref: "#/components/schemas/Tag"
        createdAt:
          type: string
        updatedAt:
          type: string
      required:
        - guest
        - seatingArea
        - waitingTime
        - note
        - tags

    ReservationWaitlistParams:
      type: object
      properties:
        guestId:
          type: integer
          format: int32
        seatingAreaId:
          type: integer
          format: int32
        shiftId:
          type: integer
          format: int32
        date:
          type: string
        guestsNumber:
          type: integer
          format: int32
        waitingTime:
          type: integer
          format: int32
        tags:
          type: array
          items:
            $ref: "#/components/schemas/TagParams"
          nullable: true
        noteId:
          type: integer
          format: int32
        type:
          type: string

    CreateWaitingReservationRequest:
      $ref: "#/components/schemas/ReservationWaitlistParams"

    CreateWaitingReservationResponse:
      $ref: "#/components/schemas/ReservationWaitlist"

    TableIds:
      type: object
      properties:
        tables:
          type: array
          items:
            type: integer
            format: int32

    UpdateWaitingReservationRequest:
      type: object
      properties:
        tables:
          type: array
          items:
            type: integer
            format: int32
        statusID:
          type: integer
          format: int32

    UpdateWaitingReservationResponse:
      $ref: "#/components/schemas/Reservation"

    GetFloorPlanByIDResponse:
      $ref: "#/components/schemas/FloorPlan"

    CreateFloorPlanRequest:
      $ref: "#/components/schemas/FloorPlanParams"
    CreateFloorPlanResponse:
      $ref: "#/components/schemas/FloorPlan"

    UpdateFloorPlanRequest:
      $ref: "#/components/schemas/FloorPlanParams"
    UpdateFloorPlanResponse:
      $ref: "#/components/schemas/FloorPlan"

    DeleteFloorPlanResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        result:
          type: string

    CreateFloorPlanLayoutRequest:
      $ref: "#/components/schemas/FloorPlanLayoutParams"
    CreateFloorPlanLayoutResponse:
      $ref: "#/components/schemas/FloorPlanLayout"

    GetWaitingReservationResponse:
      type: object
      properties:
        result:
          $ref: "#/components/schemas/ReservationWaitlist"

    GetAllWaitingReservationsResponse:
      type: array
      items:
        $ref: "#/components/schemas/ReservationWaitlist"

    ReservationStatusCount:
      type: object
      properties:
        name:
          type: string
        count:
          type: integer
          format: int32
      required:
        - name
        - count

    GetReservationStatusesCountResponse:
      type: array
      items:
        $ref: "#/components/schemas/ReservationStatusCount"

    GuestStatistics:
      type: object
      properties:
        totalReservations:
          type: integer
          format: int32
        totalSpent:
          type: number
          format: float32
        publicSatisfaction:
          type: string
      required:
        - totalReservations
        - totalSpent
        - publicSatisfaction

    GetGuestStatisticsResponse:
      $ref: "#/components/schemas/GuestStatistics"

    MonthSpending:
      type: object
      properties:
        month:
          type: string
        totalSpent:
          type: number
          format: float32
      required:
        - month
        - totalSpent

    YearSpending:
      type: object
      properties:
        year:
          type: integer
          format: int32
        months:
          type: array
          items:
            $ref: "#/components/schemas/MonthSpending"
      required:
        - year
        - months

    GetGuestSpendingResponse:
      type: array
      items:
        $ref: "#/components/schemas/YearSpending"

    GuestReservationStatistics:
      type: object
      properties:
        name:
          type: string
        value:
          type: integer
          format: int32
      required:
        - name
        - value

    GetGuestReservationStatisticsResponse:
      type: array
      items:
        $ref: "#/components/schemas/GuestReservationStatistics"

    GetAllSpecialOccasionsResponse:
      type: array
      items:
        $ref: "#/components/schemas/SpecialOccasion"

    CReservation:
      type: object
      properties:
        id:
          type: integer
          format: int32
        date:
          type: string
        branch:
          $ref: "#/components/schemas/CBranch"
        shift:
          $ref: "#/components/schemas/CShift"
        reservedVia:
          type: string
        guestsNumber:
          type: integer
          format: int32
        checkIn:
          type: string
        checkOut:
          type: string
        tables:
          type: array
          items:
            $ref: "#/components/schemas/CTable"
      required:
        - checkIn
        - checkOut

    CTable:
      type: object
      properties:
        id:
          type: integer
          format: int32
        tableNumber:
          type: string
      required:
        - tableNumber

    CCast:
      type: object
      properties:
        id:
          type: integer
          format: int32

    CShift:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
        cast:
          type: array
          items:
            $ref: "#/components/schemas/CCast"
      required:
        - cast

    CBranch:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string

    CGuest:
      type: object
      properties:
        id:
          type: integer
          format: int32
        firstName:
          type: string
        lastName:
          type: string
        phoneNumber:
          type: string
        address:
          type: string
      required:
        - firstName
        - lastName
        - phoneNumber
        - address

    Inquiry:
      type: object
      properties:
        id:
          type: integer
          format: int32
        reservation:
          $ref: "#/components/schemas/CReservation"
          nullable: true
        guest:
          $ref: "#/components/schemas/CGuest"
        branch:
          $ref: "#/components/schemas/CBranch"
        status:
          type: string
        solution:
          nullable: true
          $ref: "#/components/schemas/InquirySolution"
        type:
          $ref: "#/components/schemas/InquiryType"
        description:
          type: string
        date:
          type: string
        time:
          type: string
        creator:
          $ref: "#/components/schemas/Creator"
        createdAt:
          type: string
        updatedAt:
          type: string
      required:
        - guest
        - branch
        - status
        - type
        - description
        - creator

    InquiryParams:
      type: object
      properties:
        id:
          type: integer
          format: int32
        guestId:
          type: integer
          format: int32
        reservationId:
          type: integer
          format: int32
        status:
          type: integer
          format: int32
        solutionId:
          type: integer
          format: int32
        typeId:
          type: integer
          format: int32
        description:
          type: string
        creationDuration:
          type: number
          format: float32

    InquiryType:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
        createdAt:
          type: string
        updatedAt:
          type: string

    FeedbackSection:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
        createdAt:
          type: string
        updatedAt:
          type: string

    InquiryStatus:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
        color:
          type: string
        createdAt:
          type: string
        updatedAt:
          type: string
      required:
        - name
        - color

    InquiryComment:
      type: object
      properties:
        id:
          type: integer
          format: int32
        creator:
          $ref: "#/components/schemas/Creator"
        inquiry:
          $ref: "#/components/schemas/Inquiry"
          nullable: true
        comment:
          type: string
        createdAt:
          type: string
        updatedAt:
          type: string

    InquiryCommentParams:
      type: object
      properties:
        id:
          type: integer
          format: int32
        inquiryId:
          type: integer
          format: int32
        comment:
          type: string

    Creator:
      type: object
      properties:
        id:
          type: integer
          format: int32
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        phoneNumber:
          type: string
        avatar:
          type: string
        role:
          type: string
      required:
        - id
        - firstName
        - lastName
        - email
        - phoneNumber
        - avatar
        - role

    InquirySolution:
      type: object
      properties:
        id:
          type: integer
          format: int32
        creator:
          $ref: "#/components/schemas/Creator"
        solution:
          type: string
        createdAt:
          type: string
        updatedAt:
          type: string

    InquirySolutionParams:
      type: object
      properties:
        solution:
          type: string

    GetEmployeesReservationsCountResponse:
      type: array
      items:
        $ref: "#/components/schemas/EmployeeReservationCount"

    EmployeeReservationCount:
      type: object
      properties:
        employeeId:
          type: integer
          format: int32
        name:
          type: string
        avatar:
          type: string
        branches:
          type: array
          items:
            $ref: "#/components/schemas/BranchReservations"
      required:
        - employeeId
        - name
        - avatar
        - branches

    BranchReservations:
      type: object
      properties:
        branchId:
          type: integer
          format: int32
        branchName:
          type: string
        count:
          type: integer
          format: int32
      required:
        - branchId
        - branchName
        - count

    SwitchBranchResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string

    CreateInquiryRequest:
      $ref: "#/components/schemas/InquiryParams"

    CreateInquiryResponse:
      $ref: "#/components/schemas/Inquiry"

    UpdateInquiryRequest:
      $ref: "#/components/schemas/InquiryParams"

    UpdateInquiryResponse:
      $ref: "#/components/schemas/Inquiry"

    GetAllInquiriesResponse:
      type: object
      properties:
        pagination:
          $ref: "#/components/schemas/Pagination"
        result:
          type: array
          items:
            $ref: "#/components/schemas/Inquiry"
        totalPending:
          type: integer
          format: int32
        totalSolved:
          type: integer
          format: int32
      required:
        - pagination
        - result
        - totalPending
        - totalSolved

    GetInquiryByIdResponse:
      $ref: "#/components/schemas/Inquiry"

    GetTopEmployeesResponse:
      type: array
      items:
        $ref: "#/components/schemas/TopEmployee"

    Role:
      type: object
      properties:
        id:
          type: integer
          format: int32
        department:
          type: string
        name:
          type: string
        displayName:
          type: string
        permissions:
          type: array
          items:
            type: string
        usersCount:
          type: integer
          format: int32
        createdAt:
          type: string
        updatedAt:
          type: string
      required:
        - department
        - name
        - displayName
        - permissions
        - usersCount
        - createdAt
        - updatedAt

    RoleParams:
      type: object
      properties:
        id:
          type: integer
          format: int32
        department:
          type: integer
          format: int32
        permissions:
          type: array
          nullable: true
          items:
            type: integer
            format: int32
        name:
          type: string
        displayName:
          type: string

    Permission:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
        displayName:
          type: string
        description:
          type: string
        permissions:
          type: array
          items:
            $ref: "#/components/schemas/Permission"
            nullable: true
        createdAt:
          type: string
        updatedAt:
          type: string
      required:
        - name
        - displayName
        - description
        - createdAt
        - updatedAt

    TopEmployee:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
        avatar:
          type: string
        role:
          type: string
        reservationsCount:
          type: integer
          format: int32
        inquiriesCount:
          type: integer
          format: int32
        avgTime:
          type: number
          format: float32
      required:
        - id
        - name
        - avatar
        - roleId
        - roleName
        - reservationsCount
        - inquiriesCount
        - avgTime

    ReservationFeedbackComment:
      type: object
      properties:
        id:
          type: integer
          format: int32
        creator:
          $ref: "#/components/schemas/Creator"
        comment:
          type: string
        createdAt:
          type: string
        updatedAt:
          type: string

    ReservationFeedbackCommentParams:
      type: object
      properties:
        id:
          type: integer
          format: int32
        feedbackId:
          type: integer
          format: int32
        comment:
          type: string

    GetReservationInquiryStatisticsResponse:
      type: array
      items:
        $ref: "#/components/schemas/ReservationInquiryStatistics"

    ReservationInquiryStatistics:
      type: object
      properties:
        hour:
          type: string
        reservationCount:
          type: integer
          format: int32
        inquiryCount:
          type: integer
          format: int32
      required:
        - type
        - reservationCount
        - inquiryCount

    CreateInquiryCommentRequest:
      $ref: "#/components/schemas/InquiryCommentParams"

    CreateInquiryCommentResponse:
      $ref: "#/components/schemas/InquiryComment"

    GetAllInquiryCommentsResponse:
      type: array
      items:
        $ref: "#/components/schemas/InquiryComment"

    GetInquiryCommentByIdResponse:
      $ref: "#/components/schemas/InquiryComment"

    UpdateInquiryCommentRequest:
      $ref: "#/components/schemas/InquiryCommentParams"

    UpdateInquiryCommentResponse:
      $ref: "#/components/schemas/InquiryComment"

    CreateReservationFeedbackRequest:
      $ref: "#/components/schemas/ReservationFeedbackParams"

    CreateReservationFeedbackResponse:
      $ref: "#/components/schemas/ReservationFeedback"

    GetAllReservationsFeedbacksResponse:
      type: object
      properties:
        pagination:
          $ref: "#/components/schemas/Pagination"
        result:
          type: array
          items:
            $ref: "#/components/schemas/ReservationFeedback"
        totalPositive:
          type: integer
          format: int32
        totalNegative:
          type: integer
          format: int32
        totalPending:
          type: integer
          format: int32
        totalSolved:
          type: integer
          format: int32
      required:
        - pagination
        - result
        - totalPositive
        - totalNegative
        - totalPending
        - totalSolved

    GetAllReservationFeedbacksResponse:
      type: array
      items:
        $ref: "#/components/schemas/ReservationFeedback"

    GetReservationFeedbackByIdResponse:
      $ref: "#/components/schemas/ReservationFeedback"

    UpdateReservationFeedbackRequest:
      $ref: "#/components/schemas/ReservationFeedbackParams"

    UpdateReservationFeedbackResponse:
      $ref: "#/components/schemas/ReservationFeedback"

    GetOrderByReservationIdResponse:
      $ref: "#/components/schemas/ReservationOrder"

    AddInquirySolutionRequest:
      $ref: "#/components/schemas/InquirySolutionParams"

    AddInquirySolutionResponse:
      $ref: "#/components/schemas/InquirySolution"

    CreateReservationFeedbackCommentRequest:
      $ref: "#/components/schemas/ReservationFeedbackCommentParams"

    CreateReservationFeedbackCommentResponse:
      $ref: "#/components/schemas/ReservationFeedbackComment"

    GetAllReservationFeedbackCommentsResponse:
      type: array
      items:
        $ref: "#/components/schemas/ReservationFeedbackComment"

    UpdateReservationFeedbackCommentRequest:
      $ref: "#/components/schemas/ReservationFeedbackCommentParams"

    UpdateReservationFeedbackCommentResponse:
      $ref: "#/components/schemas/ReservationFeedbackComment"

    ReservationFeedbackSolution:
      type: object
      properties:
        id:
          type: integer
          format: int32
        creator:
          $ref: "#/components/schemas/Creator"
        solution:
          type: string
        createdAt:
          type: string
        updatedAt:
          type: string

    ReservationFeedbackSolutionParams:
      type: object
      properties:
        solution:
          type: string

    AddReservationFeedbackSolutionRequest:
      $ref: "#/components/schemas/ReservationFeedbackSolutionParams"

    AddReservationFeedbackSolutionResponse:
      $ref: "#/components/schemas/ReservationFeedbackSolution"

    GetAllFeedbackSectionsResponse:
      type: array
      properties:
        items:
          $ref: "#/components/schemas/FeedbackSection"

    CreateReservationFeedbackWebhookRequest:
      $ref: "#/components/schemas/ReservationFeedbackWebhookParams"

    CreateReservationFeedbackWebhookResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string

    ReservationFeedbackWebhookParams:
      type: object
      properties:
        reservationId:
          type: string
        rate:
          type: string
        feedback:
          type: string
      required:
        - reservationId
        - feedback
        - rate

    UpdateReservationFromWebhookRequest:
      properties:
        reservationId:
          type: string
        status:
          type: string

    UpdateReservationFromWebhookResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string

    GetAllEmployeesReportsResponse:
      type: object
      properties:
        pagination:
          $ref: "#/components/schemas/Pagination"
        result:
          type: array
          items:
            $ref: "#/components/schemas/EmployeeReport"
        statistics:
          $ref: "#/components/schemas/EmployeeStatisticsCard"
      required:
        - pagination
        - result
        - statistics

    EmployeeReport:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
        avatar:
          type: string
        role:
          type: string
        reservationsCount:
          type: integer
          format: int32
        inquiriesCount:
          type: integer
          format: int32
        avgTime:
          type: number
          format: float32
        rate:
          type: number
          format: float32
      required:
        - name
        - avatar
        - roleId
        - reservationsCount
        - inquiriesCount
        - avgTime
        - rate

    GetEmployeeReportResponse:
      type: object
      properties:
        pagination:
          $ref: "#/components/schemas/Pagination"
        result:
          type: array
          items:
            $ref: "#/components/schemas/EmployeeOperation"
        employee:
          $ref: "#/components/schemas/TopEmployee"
      required:
        - pagination
        - result
        - employee

    EmployeeOperation:
      type: object
      properties:
        id:
          type: integer
          format: int32
        type:
          type: string
        guest:
          $ref: "#/components/schemas/CGuest"
        date:
          type: string
        status:
          type: string
        timer:
          type: number
          format: float32
      required:
        - type
        - phoneNumber
        - guestName
        - date
        - status
        - timer

    EmployeeStatisticsCard:
      type: object
      properties:
        totalRatings:
          type: integer
          format: int32
        totalAvgRatings:
          type: number
          format: float32
        stars:
          $ref: "#/components/schemas/StarsCard"
      required:
        - totalRatings
        - totalAvgRatings
        - stars

    StarsCard:
      type: object
      properties:
        oneStar:
          type: integer
          format: int32
        twoStar:
          type: integer
          format: int32
        threeStar:
          type: integer
          format: int32
        fourStar:
          type: integer
          format: int32
        fiveStar:
          type: integer
          format: int32
      required:
        - oneStar
        - twoStar
        - threeStar
        - fourStar
        - fiveStar

    LogoutResponse:
      type: object
      properties:
        message:
          type: string
      required:
        - message

    UserBranch:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string

    User:
      type: object
      properties:
        id:
          type: integer
          format: int32
        employeeId:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        phoneNumber:
          type: string
        role:
          type: string
        department:
          type: string
        avatar:
          type: string
        gender:
          type: string
        joinedAt:
          type: string
        birthdate:
          type: string
        branches:
          type: array
          items:
            $ref: "#/components/schemas/UserBranch"
      required:
        - firstName
        - lastName
        - email
        - phoneNumber
        - role
        - avatar

    UserParams:
      type: object
      properties:
        employeeId:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phoneNumber:
          type: string
        birthdate:
          type: string
        gender:
          type: string
        role:
          type: string
        avatar:
          type: string
        joinedAt:
          type: string
        branchIds:
          type: array
          items:
            type: integer
            format: int32

    CreateUserRequest:
      $ref: "#/components/schemas/UserParams"

    CreateUserResponse:
      $ref: "#/components/schemas/User"

    UpdateUserRequest:
      $ref: "#/components/schemas/UserParams"

    UpdateUserResponse:
      $ref: "#/components/schemas/User"

    GetAllUsersResponse:
      type: object
      properties:
        pagination:
          $ref: "#/components/schemas/Pagination"
        result:
          type: array
          items:
            $ref: "#/components/schemas/User"
      required:
        - pagination
        - result

    GetUserByIDResponse:
      $ref: "#/components/schemas/User"

    DeleteUserResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string

    CreateRoleRequest:
      $ref: "#/components/schemas/RoleParams"

    CreateRoleResponse:
      $ref: "#/components/schemas/Role"

    UpdateRoleRequest:
      $ref: "#/components/schemas/RoleParams"

    UpdateRoleResponse:
      $ref: "#/components/schemas/Role"

    GetAllRolesResponse:
      type: object
      properties:
        pagination:
          $ref: "#/components/schemas/Pagination"
        result:
          type: array
          items:
            $ref: "#/components/schemas/Role"
      required:
        - pagination
        - result

    GetRoleByIDResponse:
      $ref: "#/components/schemas/Role"

    DeleteRoleResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string

    GetAllPermissionsResponse:
      type: array
      properties:
        items:
          $ref: "#/components/schemas/Permission"

    Department:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
        createdAt:
          type: string
        updatedAt:
          type: string

    GetAllDepartmentsResponse:
      type: object
      properties:
        pagination:
          nullable: true
          $ref: "#/components/schemas/Pagination"
        result:
          type: array
          items:
            $ref: "#/components/schemas/Department"

    GetGuestInquiriesResponse:
      type: array
      items:
        $ref: "#/components/schemas/Inquiry"

    CheckIfDayClosedResponse:
      type: object
      properties:
        closed:
          type: boolean
      required:
        - closed

    CloseDayOperationsResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
    SendMessageRequest:
      type: object
      properties:
        message:
          type: string
        to:
          type: array
          items:
            type: integer
            format: int32

    SendMessageResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string

    DeleteReservationTagCategoryResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string

    DeleteGuestTagCategoryResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string

    DeleteReservationResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
    UpdateWaitingReservationDetailsRequest:
      $ref: "#/components/schemas/ReservationWaitlistParams"

    UpdateWaitingReservationDetailsResponse:
      $ref: "#/components/schemas/ReservationWaitlist"

    AddWaitingReservationNoteRequest:
      type: object
      properties:
        description:
          type: string

    AddWaitingReservationNoteResponse:
      $ref: "#/components/schemas/ReservationWaitlistNote"

    UpdateWaitingReservationNoteRequest:
      type: object
      properties:
        description:
          type: string

    UpdateWaitingReservationNoteResponse:
      $ref: "#/components/schemas/ReservationWaitlistNote"

    ChangePasswordRequest:
      type: object
      properties:
        oldPassword:
          type: string
        newPassword:
          type: string
        confirmNewPassword:
          type: string

    ChangePasswordResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string

    CreateIntegrationRequest:
      type: object
      properties:
        systemName:
          type: string
        systemType:
          type: string
        baseURL:
          type: string
        credentialType:
          type: string
        credentials:
          $ref: "#/components/schemas/Credentials"
      required:
        - systemName
        - systemType
        - baseUrl
        - credentialType
        - credentials
    CreateIntegrationResponse:
      $ref: "#/components/schemas/Integration"

    Integration:
      type: object
      properties:
        id:
          type: integer
          format: int32
        systemName:
          type: string
        systemType:
          type: string
        baseURL:
          type: string
        credentialType:
          type: string
        credentials:
          type: string
        createdAt:
          type: string
        updatedAt:
          type: string
      required:
        - systemName
        - systemType
        - baseURL
        - credentialType

    Credentials:
      type: object
      additionalProperties:
        type: string

    GetReservationsCoverFlowResponse:
      type: array
      items:
        $ref: "#/components/schemas/CoverFlow"

    CoverFlow:
      type: object
      properties:
        time:
          type: string
        reservations:
          type: array
          items:
            $ref: "#/components/schemas/CoverFlowReservation"
      required:
        - time
        - reservations

    CoverFlowReservation:
      type: object
      properties:
        id:
          type: integer
          format: int32
        guestsNumber:
          type: integer
          format: int32
        status:
          $ref: "#/components/schemas/CoverFlowReservationStatus"

    CoverFlowReservationStatus:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
        color:
          type: string
        icon:
          type: string

    AutomatedReportType:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
        description:
          type: string
      required:
        - id
        - name
        - description

    AutomatedReportParams:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
        reports:
          type: array
          items:
            type: integer
            format: int32
        repeatInterval:
          type: string
        startTime:
          type: string
        endTime:
          type: string
        repeatIntervalHours:
          type: number
          format: float
        userIds:
          type: array
          nullable: true
          items:
            type: integer
            format: int32
        sendVia:
          type: array
          items:
            type: string

    AutomatedReport:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
        reports:
          type: array
          items:
            $ref: "#/components/schemas/AutomatedReportType"
        repeatInterval:
          type: string
        startTime:
          type: string
        endTime:
          type: string
        repeatIntervalHours:
          type: number
          format: float
        users:
          type: array
          items:
            $ref: "#/components/schemas/Creator"
        sendVia:
          type: array
          items:
            type: string

        createdAt:
          type: string
        updatedAt:
          type: string
      required:
        - id
        - name
        - reports
        - repeatInterval
        - startTime
        - repeatIntervalHours
        - users
        - sendVia

    GetAllAutomatedReportsResponse:
      type: array
      items:
        $ref: "#/components/schemas/AutomatedReport"

    CreateAutomatedReportRequest:
      $ref: "#/components/schemas/AutomatedReportParams"

    CreateAutomatedReportResponse:
      $ref: "#/components/schemas/AutomatedReport"

    UpdateAutomatedReportRequest:
      $ref: "#/components/schemas/AutomatedReportParams"

    UpdateAutomatedReportResponse:
      $ref: "#/components/schemas/AutomatedReport"

    GetAutomatedReportByIdResponse:
      $ref: "#/components/schemas/AutomatedReport"

    GetAllAutomatedReportTypesResponse:
      type: array
      items:
        $ref: "#/components/schemas/AutomatedReportType"

    DeleteAutomatedReportResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string

    UpdatePinCodeRequest:
      type: object
      properties:
        oldPinCode:
          type: string
        newPinCode:
          type: string
        confirmNewPinCode:
          type: string

    UpdatePinCodeResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string

    DeleteGuestNoteResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string

    DeleteReservationNoteResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string

    UpdateGuestCategoryTagRequest:
      $ref: "#/components/schemas/TagParams"

    UpdateGuestCategoryTagResponse:
      $ref: "#/components/schemas/Tag"

    UpdateReservationCategoryTagRequest:
      $ref: "#/components/schemas/TagParams"

    UpdateReservationCategoryTagResponse:
      $ref: "#/components/schemas/Tag"

    DeleteTagResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string

    MarkTableRequest:
      type: object
      properties:
        date:
          type: string
        moveReservations:
          type: boolean
        status:
          type: string
          oneOf:
            - "available"
            - "reserved"
            - "unavailable"

    MarkTableResponse:
      $ref: "#/components/schemas/Table"

    TableRestriction:
      type: object
      properties:
        date:
          type: string
        status:
          type: string
    Message:
      type: object
      properties:
        id:
          type: string
          format: uuid
        from:
          type: string
        body:
          type: string
        type:
          type: string

    GetAllMessagesResponse:
      type: object
      properties:
        result:
          type: array
          items:
            $ref: "#/components/schemas/Message"
        pagination:
          $ref: "#/components/schemas/Pagination"

    ToggleMessageResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string

    WidgetSettings:
      type: object
      properties:
        font:
          type: string
        primaryColor:
          type: string
        secondaryColor:
          type: string
        logo:
          type: string
        banner:
          type: string
        mainImage:
          type: string
        facebookAppId:
          type: string
        facebookPixelId:
          type: string
        privacyPolicyUrl:
          type: string
        termsOfServiceUrl:
          type: string
        googleAnalyticsId:
          type: string
        vrUrl:
          type: string
        createdAt:
          type: string
        updatedAt:
          type: string
      required:
        - font
        - primaryColor
        - secondaryColor
        - facebookAppId
        - facebookPixelId
        - logo
        - banner
        - mainImage
        - privacyPolicyUrl
        - termsOfServiceUrl
        - googleAnalyticsId
        - vrUrl

    GetWidgetSettingsResponse:
      $ref: "#/components/schemas/WidgetSettings"

    WidgetAvailableTime:
      type: object
      properties:
        time:
          type: string
        available:
          type: boolean
        date:
          type: string
      required:
        - time
        - available

    GetWidgetAvailableTimesResponse:
      type: array
      items:
        $ref: "#/components/schemas/WidgetAvailableTime"

    WidgetGuestParams:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
          x-extra-tags:
            validate: "email"
        phoneNumber:
          type: string
        language:
          type: string
        birthDate:
          type: string
        primary:
          type: boolean

    CreateWidgetReservationRequest:
      type: object
      properties:
        guests:
          type: array
          items:
            $ref: "#/components/schemas/WidgetGuestParams"
        seatingAreaId:
          type: integer
          format: int32
        branchId:
          type: integer
          format: int32
        guestsNumber:
          type: integer
          format: int32
        specialOccasionId:
          type: integer
          format: int32
        date:
          type: string
        time:
          type: string
        reservedVia:
          type: string
        note:
          type: string

    CreateWidgetReservationResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string

    OverviewReport:
      type: object
      properties:
        count:
          type: integer
          format: int32
        totalGuestsCount:
          type: integer
          format: int32
        percentage:
          type: integer
          format: int32
      required:
        - count
        - totalGuestsCount
        - percentage

    EventCount:
      type: object
      properties:
        count:
          type: integer
          format: int32
        type:
          type: string
      required:
        - count
        - type

    GuestReportSpecialOccasionCount:
      type: object
      properties:
        count:
          type: integer
          format: int32
        totalCount:
          type: integer
          format: int32
        events:
          type: array
          items:
            $ref: "#/components/schemas/EventCount"
      required:
        - count
        - totalCount
        - events

    GetOverviewReportResponse:
      type: object
      properties:
        reservations:
          $ref: "#/components/schemas/OverviewReport"
        noShow:
          $ref: "#/components/schemas/OverviewReport"
        topTimes:
          type: array
          items:
            type: string
        vip:
          $ref: "#/components/schemas/OverviewGuestTag"
        repeater:
          $ref: "#/components/schemas/OverviewGuestTag"
        specialOccasion:
          $ref: "#/components/schemas/GuestReportSpecialOccasionCount"
      required:
        - reservations
        - noShow
        - topTimes
        - vip
        - repeater
        - specialOccasion

    OverviewReservationsReport:
      type: object
      properties:
        time:
          type: string
        totalReservation:
          type: integer
          format: int32
        totalNoShow:
          type: integer
          format: int32
      required:
        - time
        - totalReservation
        - totalNoShow

    GetOverviewReservationsReportResponse:
      type: array
      properties:
        result:
          type: array
          items:
            $ref: "#/components/schemas/OverviewReservationsReport"

    OverviewGuestTag:
      type: object
      properties:
        count:
          type: integer
          format: int32
        totalCount:
          type: integer
          format: int32
      required:
        - count
        - totalCount

    GetFinancialReportResponse:
      type: object
      properties:
        totalSales:
          type: integer
          format: int32
        averageCheck:
          type: integer
          format: int32
        averageCheckPerPerson:
          type: number
      required:
        - totalSales
        - averageCheck
        - averageCheckPerPerson

    TopSpendersTransaction:
      type: object
      properties:
        name:
          type: string
        guestId:
          type: integer
          format: int32
        amount:
          type: integer
          format: int32
      required:
        - name
        - guestId
        - amount

    GetFinancialTopSpendersReportResponse:
      type: object
      properties:
        result:
          type: array
          items:
            $ref: "#/components/schemas/TopSpendersTransaction"
        pagination:
          $ref: "#/components/schemas/Pagination"

    OverviewGuestReport:
      type: object
      properties:
        period:
          type: string
        repeater:
          type: integer
          format: int32
        vip:
          type: integer
          format: int32
        specialOccasion:
          type: integer
          format: int32
      required:
        - period
        - repeater
        - vip
        - specialOccasion

    GetOverviewGuestReportResponse:
      type: array
      properties:
        result:
          type: array
          items:
            $ref: "#/components/schemas/OverviewGuestReport"

    ReportTag:
      type: object
      properties:
        name:
          type: string
        color:
          type: string
      required:
        - name
        - color

    CustomizeReport:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
        date:
          type: string
        time:
          type: string
        branch:
          type: string
        reservationTags:
          type: array
          items:
            $ref: "#/components/schemas/ReportTag"
        spent:
          type: integer
          format: int32
        seatingArea:
          type: string
        shift:
          type: string
        bookedVia:
          type: string
        status:
          $ref: "#/components/schemas/ReportTag"
        guestsNumber:
          type: integer
          format: int32
      required:
        - id
        - name
        - date
        - time
        - branch
        - reservationTags
        - spent
        - seatingArea
        - shift
        - bookedVia
        - status
        - guestsNumber

    GetCustomizeReportResponse:
      type: object
      properties:
        result:
          type: array
          items:
            $ref: "#/components/schemas/CustomizeReport"
        pagination:
          $ref: "#/components/schemas/Pagination"
      required:
        - result
        - pagination

    DownloadCustomizeReportResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string

    GuestReportReservedByCount:
      type: object
      properties:
        whatsapp:
          type: integer
          format: int32
        goplace:
          type: integer
          format: int32
        other:
          type: object
          additionalProperties:
            type: integer
            format: int32
      required:
        - whatsapp
        - goplace
        - other

    GetGuestReportResponse:
      type: object
      properties:
        vip:
          type: integer
          format: int32
        repeater:
          type: integer
          format: int32
        specialOccasion:
          $ref: "#/components/schemas/GuestReportSpecialOccasionCount"
        reservedBy:
          $ref: "#/components/schemas/GuestReportReservedByCount"
      required:
        - vip
        - repeater
        - specialOccasion
        - reservedBy

    CustomizeReportParams:
      type: object
      properties:
        fromDate:
          type: string
        toDate:
          type: string
        fromTime:
          type: string
        toTime:
          type: string
        branchIds:
          type: array
          items:
            type: integer
            format: int32
        reservationTagIds:
          type: array
          items:
            type: integer
            format: int32
        minSpent:
          type: integer
          format: int32
        maxSpent:
          type: integer
          format: int32
        shiftIds:
          type: array
          items:
            type: integer
            format: int32
        seatingAreaIds:
          type: array
          items:
            type: integer
            format: int32
        bookedVia:
          type: array
          items:
            type: string
        reservationStatuses:
          type: array
          items:
            type: string

    DownloadCustomizeReportRequest:
      type: object
      properties:
        filters:
          $ref: "#/components/schemas/CustomizeReportParams"
        columns:
          type: array
          items:
            type: string
        email:
          type: string

    RequestResetPasswordRequest:
      type: object
      properties:
        email:
          type: string
        phoneNumber:
          type: string

    RequestResetPasswordResponse:
      type: object
      properties:
        token:
          type: string

    VerifyOtpRequest:
      type: object
      properties:
        code:
          type: string
        token:
          type: string

    VerifyOtpResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string

    ResendOtpRequest:
      type: object
      properties:
        token:
          type: string

    ResendOtpResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string

    ResetPasswordRequest:
      type: object
      properties:
        token:
          type: string
        newPassword:
          type: string
        confirmNewPassword:
          type: string

    ResetPasswordResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string

    GetAllBookedViaResponse:
      type: array
      items:
        type: string

    RequestReservationWebhookRequest:
      type: object
      properties:
        phoneNumber:
          type: string

    RequestReservationWebhookResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string

    RestaurantItemParams:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
        price:
          type: number
          format: float
        image:
          type: string
        icon:
          type: string

    RestaurantItem:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
        price:
          type: number
          format: float
        code:
          type: string
        image:
          type: string
        icon:
          type: string
        createdAt:
          type: string
        updatedAt:
          type: string

    CreateRestaurantItemRequest:
      $ref: "#/components/schemas/RestaurantItemParams"

    CreateRestaurantItemResponse:
      $ref: "#/components/schemas/RestaurantItem"

    UpdateRestaurantItemRequest:
      $ref: "#/components/schemas/RestaurantItemParams"

    UpdateRestaurantItemResponse:
      $ref: "#/components/schemas/RestaurantItem"

    GetAllRestaurantItemsResponse:
      type: object
      properties:
        pagination:
          $ref: "#/components/schemas/Pagination"
        result:
          type: array
          items:
            $ref: "#/components/schemas/RestaurantItem"
      required:
        - pagination
        - result

    GetRestaurantItemByIDRequest:
      $ref: "#/components/schemas/RestaurantItemParams"

    GetRestaurantItemByIDResponse:
      $ref: "#/components/schemas/RestaurantItem"

    PaymentRequest:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/PaymentItem"
        delivery:
          type: array
          items:
            type: string
        contacts:
          type: array
          items:
            type: integer
            format: int32

    PaymentResponse:
      type: object
      properties:
        id:
          type: integer
          format: int32
        contacts:
          type: integer
          format: int32
        branch:
          $ref: "#/components/schemas/PaymentBranch"
        guest:
          $ref: "#/components/schemas/CGuest"
        invoice:
          $ref: "#/components/schemas/Invoice"
        status:
          type: string
        card:
          $ref: "#/components/schemas/PaymentCard"
          nullable: true
        delivery:
          type: array
          items:
            type: string
      required:
        - contacts
        - branch
        - guest
        - invoice
        - status
        - delivery

    PaymentCard:
      type: object
      properties:
        lastFourDigits:
          type: string
        cardType:
          type: string
        cardExpireDate:
          type: string
      required:
        - lastFourDigits
        - cardType
        - cardExpireDate

    PaymentItem:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
        price:
          type: number
          format: float
        quantity:
          type: integer
          format: int32
      required:
        - name
        - price
        - quantity

    PaymentBranch:
      type: object
      properties:
        name:
          type: string
        address:
          type: string
        vatPercent:
          type: number
          format: float
        serviceCharge:
          type: number
          format: float
        crNumber:
          type: string
        vatRegNumber:
          type: string
      required:
        - name
        - address
        - vatPercent
        - serviceCharge
        - crNumber
        - vatRegNumber

    Invoice:
      type: object
      properties:
        invoiceId:
          type: string
        invoiceRef:
          type: string
        date:
          type: string
        waiter:
          type: string
        items:
          type: array
          items:
            $ref: "#/components/schemas/PaymentItem"
        subTotal:
          type: number
          format: float32
      required:
        - invoiceId
        - invoiceRef
        - date
        - waiter
        - items
        - subTotal

    GetAllReservationPaymentsResponse:
      type: array
      items:
        $ref: "#/components/schemas/PaymentResponse"

    CardInfo:
      type: object
      properties:
        last_four:
          type: string
        brand:
          type: string

    Transaction:
      type: object
      properties:
        card:
          $ref: "#/components/schemas/CardInfo"

    UpdatePaymentFromWebhookRequest:
      type: object
      properties:
        id:
          type: string
        status:
          type: string
        transactions:
          type: array
          items:
            $ref: "#/components/schemas/Transaction"

    UpdatePaymentFromWebhookResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string

    DeleteRestaurantItemResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string

    AddReservationVisitorsRequest:
      type: object
      properties:
        visitors:
          type: array
          items:
            type: integer
            format: int32

    AddReservationVisitorsResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string

    CancelPaymentResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string

    DeleteReservationVisitorsRequest:
      type: object
      properties:
        visitors:
          type: array
          items:
            type: integer
            format: int32

    DeleteReservationVisitorsResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
